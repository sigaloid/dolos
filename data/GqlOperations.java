package com.reddit.graphql;
/* compiled from: GqlOperations.kt */
/* loaded from: classes7.dex */
public final class e {
    public static final d f38440a = new d("dbac6251dd21", "ActiveLanguages", "query ActiveLanguages { activeLanguages { name isoCode } }");
    public static final d f38444b = new d("dc41a094c33d", "AddPredictionDrafts", "mutation AddPredictionDrafts($input: AddPredictionDraftsInput!) {\n          addPredictionDrafts(input: $input) { ok tournament { __typename\n          ...predictionTournamentFragment } errors { message } } }  fragment\n          predictionTournamentFragment on PredictionTournament { tournamentId name status themeId\n          }");
    public static final d f38447c = new d("855e870387cf", "AllDynamicConfigs", "query AllDynamicConfigs { dynamicConfigs { values { __typename ... on BoolDynamicConfig {\n          isTrue name } ... on IntDynamicConfig { intVal: value name } ... on FloatDynamicConfig {\n          floatVal: value name } ... on StringDynamicConfig { stringVal: value name } ... on\n          MapDynamicConfig { mapVal: value name } } ok errors { message } } }");
    public static final d f38451d = new d("454651d3d2fa", "AllPosts", "query AllPosts($sort: PostFeedSort, $range: PostFeedRange, $after:\n          String, $pageSize: Int, $adContext: AdContextInput, $forceAds:\n          ForceAdsInput, $includeSubredditInPosts: Boolean = true , $includeAwards:\n          Boolean = true , $feedContext: FeedContextInput, $includeCommentPostUnits:\n          Boolean = false , $includePostStats: Boolean = false ) { postFeed: all { posts(sort:\n          $sort, time: $range, after: $after, first: $pageSize, adContext:\n          $adContext, forceAds: $forceAds) { pageInfo { __typename ...pageInfoFragment }\n          dist edges { node { __typename ...postFragment } } } } }  fragment pageInfoFragment on\n          PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d f38455e = new d("de6e947bfacc", "AvailableAwards", "query AvailableAwards($subredditId: ID!, $subTypes: [ID!]) {\n          availableAwards(subredditId: $subredditId, subTypes: $subTypes) { __typename\n          ...awardFragment ...awardDetailsFragment } }  fragment mediaSourceFragment on MediaSource\n          { url dimensions { width height } }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }");
    public static final d f38459f = new d("9200f7368db2", "AvatarCatalog", "query AvatarCatalog($audience: String) { avatarBuilderCatalog(audience:\n          $audience) { userCapabilities categories { id name sections { id name accessoryIds\n          colorPickerCustomizableClass } } closet { accessoryIds maxSlots } runways { id title items\n          { id title imageUrl capabilityRequired accessoryIds } } outfits { __typename id sectionId\n          accessoryIds state capabilityRequired customizableClasses tags title subtitle\n          foregroundImage { url } backgroundImage { url } ...gqlCatalogInventoryItem ... on\n          NFTAvatarOutfit { tokenId contractAddress walletAddress rarity } } accessories {\n          __typename ...avatarAccessoryFragment } pastAvatars { __typename ...avatarFragment } } } \n          fragment gqlCatalogInventoryItem on AvatarOutfit { inventoryItem { id name artist {\n          redditorInfo { __typename id displayName ... on Redditor { profile { title } } } } } } \n          fragment avatarAssetFragment on AvatarAsset { accessoryId imageUrl slot slotNumber } \n          fragment avatarAccessoryFragment on AvatarAccessory { isAvailableForCloset assets {\n          __typename ...avatarAssetFragment } capabilityRequired customizableClasses\n          defaultAccessoryId id sectionId state tags }  fragment avatarFragment on UserAvatar { id\n          accountId accessoryIds backgroundInventoryItem { id } fullImage { url dimensions { width\n          height } } headshotImage { url dimensions { width height } } lastRenderAt lastUpdateAt\n          styles { className fill } tags }");
    public static final d f38463g = new d("59dac1a2900f", "AwardingInfosByIds", "query AwardingInfosByIds($ids: [ID!]!) { awardingsByIds(ids: $ids) { id award {\n          id } target { id } awarderInfo { __typename ...redditorNameFragment } isAnonymous } } \n          fragment redditorNameFragment on RedditorInfo { __typename ... on Redditor { id name\n          prefixedName } ... on UnavailableRedditor { id name } ... on DeletedRedditor { id name }\n          }");
    public static final d f38467h = new d("77ac6bc8a4db", "AwardingTotalsForComment", "query AwardingTotalsForComment($id: ID!) { comment(id: $id) { __typename ... on\n          Comment { awardings { __typename ...awardingTotalFragment award { __typename\n          ...awardFragment ...awardDetailsFragment } } } } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment groupAwardFragment on Award {\n          tiers { awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }");
    public static final d f38471i = new d("2e9848df6051", "AwardingTotalsForPost", "query AwardingTotalsForPost($id: ID!) { postInfoById(id: $id) { awardings {\n          __typename ...awardingTotalFragment award { __typename ...awardFragment\n          ...awardDetailsFragment } } } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment groupAwardFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }");
    public static final d f38475j = new d("46f3c89ff0cf", "BadgeCount", "query BadgeCount { badgeIndicators { __typename ...badgeIndicatorsFragment } }  fragment\n          badgeIndicatorsFragment on BadgeIndicators { directMessages { count style } chatTab {\n          count style } messageTab { count style } activityTab { count style } inboxTab { count\n          style } appBadge { count style } chatHasNewMessages { style isShowing } }");
    public static final d f38479k = new d("45affb30d5a6", "BlockAwarderByAwardingId", "mutation BlockAwarderByAwardingId($awardingId: ID!) { blockAwarder(input: {\n          awardingId: $awardingId } ) { ok } }");
    public static final d f38483l = new d("152a67d317d5", "BlockedRedditors", "query BlockedRedditors($after: String, $pageSize: Int) { identity {\n          blockedRedditorsInfo(after: $after, first: $pageSize) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { id } } } } }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }");
    public static final d f38487m = new d("e02fe8e5969d", "BlockedUsers", "query BlockedUsers($after: String, $pageSize: Int) { identity {\n          blockedRedditorsInfo(after: $after, first: $pageSize) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename id ... on Redditor { id name icon { url }\n          } } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor }");
    public static final d f38491n = new d("38e04af08cb8", "CancelEconRecurringPayment", "mutation CancelEconRecurringPayment($orderId: ID!) {\n          cancelEconRecurringPayment(input: { originalOrderId: $orderId } ) { ok errors {\n          message } } }");
    public static final d f38495o = new d("e736232fab55", "CancelPrediction", "mutation CancelPrediction($input: CancelPredictionInput!) { cancelPrediction(input:\n          $input) { ok poll { __typename ...postPollFragment } errors { message } } } \n          fragment postPollOptionFragment on PostPollOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment postPollFragment on PostPoll { options { __typename\n          ...postPollOptionFragment } totalVoteCount votingEndsAt selectedOptionId isPrediction\n          totalStakeAmount resolvedOptionId wonAmount tournamentId voteUpdatesRemained\n          predictionStatus }");
    public static final d f38499p = new d("70e934edddfc", "ChangePrediction", "mutation ChangePrediction($input: ChangePredictionInput!) { changePrediction(input:\n          $input) { ok poll { __typename ...postPollFragment } errors { message } } } \n          fragment postPollOptionFragment on PostPollOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment postPollFragment on PostPoll { options { __typename\n          ...postPollOptionFragment } totalVoteCount votingEndsAt selectedOptionId isPrediction\n          totalStakeAmount resolvedOptionId wonAmount tournamentId voteUpdatesRemained\n          predictionStatus }");
    public static final d f38502q = new d("6cc2fa5fc684", "ChangePredictionVote", "mutation ChangePredictionVote($input: ChangePredictionVoteInput!) {\n          changePredictionVote(input: $input) { ok poll { __typename ...postPollFragment }\n          errors { message } } }  fragment postPollOptionFragment on PostPollOption { id text\n          voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on PostPoll {\n          options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }");
    public static final d f38506r = new d("7ecf669d1460", "ChatTabBadge", "query ChatTabBadge { badgeIndicators { __typename ...chatBadgeIndicatorsFragment } } \n          fragment chatBadgeIndicatorsFragment on BadgeIndicators { chatTab { count style }\n          chatHasNewMessages { style isShowing } }");
    public static final d f38510s = new d("3fc3c9d9b246", "ClaimAwardOffer", "mutation ClaimAwardOffer($input: ClaimAwardOfferInput!) { claimAwardOffer(input:\n          $input) { ok awards { __typename ...awardDetailsFragment ...awardFragment }\n          nextStartsAt } }  fragment mediaSourceFragment on MediaSource { url dimensions { width\n          height } }  fragment groupAwardDetailsFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } staticIcon_128:\n          staticIcon(maxWidth: 128) { __typename ...mediaSourceFragment } staticIcon_144:\n          staticIcon(maxWidth: 144) { __typename ...mediaSourceFragment } staticIcon_172:\n          staticIcon(maxWidth: 172) { __typename ...mediaSourceFragment } staticIcon_192:\n          staticIcon(maxWidth: 192) { __typename ...mediaSourceFragment } staticIcon_256:\n          staticIcon(maxWidth: 256) { __typename ...mediaSourceFragment } staticIcon_288:\n          staticIcon(maxWidth: 288) { __typename ...mediaSourceFragment } staticIcon_384:\n          staticIcon(maxWidth: 384) { __typename ...mediaSourceFragment } } }  fragment\n          awardDetailsFragment on Award { __typename isEnabled isNew coinPrice daysOfPremium\n          description startsAt endsAt tags stickyDurationSeconds iconFormat\n          ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } }  fragment\n          groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat icon_16:\n          icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }");
    public static final d f38514t = new d("1d9f4ac2ce7f", "CoinPackOffers", "query CoinPackOffers { globalProductOffers(productTypes: [\"coinpack\",\"premium\"]) { offers {\n          id type name description userSpendingProfile version tags pricePackages { id price\n          currency quantity description baselinePrice bonusPercent requiredPaymentProviders\n          externalProductId tags promos { __typename id promoType name description endsAt ... on\n          CoinSalePromo { heroMobileImage { url } heroText heroSubText ctaText } ... on\n          CoinDealPromo { dealType } } images { name image { url dimensions { width height } } }\n          skus { __typename kind ... on CoinsSku { name description coins coinsReceiver\n          baselineCoins bonusPercent } ... on CoinsDripSku { name description coins duration {\n          __typename ...durationFragment } } } } } } }  fragment durationFragment on Duration {\n          amount unit }");
    public static final d f38518u = new d("99d10c0c9045", "CommentsPageAdPost", "query CommentsPageAdPost($id: ID!, $commentsAd: String!, $count: Int!,\n          $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) { children: postInfoById(id: $id) { __typename id ... on SubredditPost {\n          commentsPageAds(count: $count, forceAds: { ad: $commentsAd } , feedContext:\n          $feedContext) { __typename ...postContentFragment profile { __typename\n          ...profileFragment } } } } }  fragment mediaSourceFragment on MediaSource { url dimensions\n          { width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }");
    public static final d f38522v = new d("c9566e9880ec", "CreateAvatar", "mutation CreateAvatar($input: CreateAvatarInput!) { createAvatar(input: $input)\n          { ok errors { message } } }");
    public static final d f38526w = new d("67e5d8db834d", "CreateAvatarShare", "mutation CreateAvatarShare($input: CreateAvatarInput!) { createAvatar(input:\n          $input) { shareUrl ok errors { message } } }");
    public static final d f38530x = new d("47dba8b7d430", "CreateChannelLink", "mutation CreateChannelLink($input: CreateChatChannelInviteLinkInput!) {\n          createChatChannelInviteLink(input: $input) { ok inviteUrl } }");
    public static final d f38534y = new d("0687013880e7", "CreateChatGifMessage", "mutation CreateChatGifMessage($input: CreateChatMessageInput!) {\n          createChatMessage(input: $input) { ok message { channelSendbirdId createdAt\n          customType data isRemoved mentionType message messageId type updatedAt mentionedUsers {\n          name id } user { id name } } } }");
    public static final d f38538z = new d("375693994baa", "CreateChatImageMessage", "mutation CreateChatImageMessage($input: CreateChatMessageInput!) {\n          createChatMessage(input: $input) { errors { message } ok message { messageId\n          messageRedditId } } }");
    public static final d A = new d("54fc60352f33", "CreateCoinsOrder", "mutation CreateCoinsOrder($nonce: String!, $productId: ID!,\n          $productVersion: Int!, $price: String!, $pricePackageId: ID!,\n          $currency: Currency!, $count: String!, $subredditId: ID!) {\n          createEconOrder(input: { nonce: $nonce productId: $productId productVersion:\n          $productVersion price: $price pricePackageId: $pricePackageId currency:\n          $currency productsCount: $count subredditId: $subredditId\n          userCoinsInSubreddit: { subredditId: $subredditId }  } ) { ok order { id status } }\n          }");
    public static final d B = new d("2f19f4062eeb", "CreateComment", "mutation CreateComment($input: CreateCommentInput!, $includeAwards: Boolean =\n          true ) { createComment(input: $input) { commentInfo { __typename ... on Comment {\n          __typename ...commentFragment } } ok errors { message } fieldErrors { field message code }\n          } }  fragment redditorNameFragment on RedditorInfo { __typename ... on Redditor { id name\n          prefixedName } ... on UnavailableRedditor { id name } ... on DeletedRedditor { id name } }\n           fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment groupAwardFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }\n           fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename ...\n          on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment commentFragment on Comment { id createdAt editedAt parent { id }\n          postInfo { __typename id title ... on SubredditPost { subreddit { id name prefixedName } }\n          ... on ProfilePost { profile { redditorInfo { __typename ...redditorNameFragment } } } }\n          isLocked isInitiallyCollapsed initiallyCollapsedReason content { __typename markdown html\n          richtext typeHint ...richtextMediaFragment } authorInfo { __typename ...authorInfoFragment\n          } score voteState authorFlair { __typename ...authorFlairFragment } isSaved isStickied\n          isScoreHidden awardings @include(if: $includeAwards) { __typename\n          ...awardingTotalFragment } associatedAward { __typename ...awardFragment } treatmentTags\n          isArchived distinguishedAs permalink moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment ...proxyAuthorInfoFragment ... on\n          CommentModerationInfo { isAutoCollapsedFromCrowdControl } verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount isRemoved\n          ...lastAuthorModNoteFragment } }");
    public static final d C = new d("5b21a5b367d1", "CreateCustomEmoji", "mutation CreateCustomEmoji($input: CreateCustomEmojiInput!) {\n          createCustomEmoji(input: $input) { ok emoji { id name emojiIcon { url mimeType x y }\n          stickerIcon { url mimeType x y } } errors { message } } }");
    public static final d D = new d("1c1b4380a4ba", "CreateEconOrder", "mutation CreateEconOrder($input: CreateOrderInput!) { createEconOrder(input:\n          $input) { ok errors { message code } order { id } } }");
    public static final d E = new d("513101caeaff", "CreateEconPayment", "mutation CreateEconPayment($input: CreatePaymentInput!) { createEconPayment(input:\n          $input) { ok errors { message } } }");
    public static final d F = new d("a8c57a0659ba", "CreateMediaUploadLease", "mutation CreateMediaUploadLease($input: CreateMediaUploadLeaseInput!) {\n          createMediaUploadLease(input: $input) { mediaId uploadLease { uploadLeaseUrl\n          uploadLeaseHeaders { header value } } } }");
    public static final d G = new d("13c7be3872b5", "CreatePredictionTournament", "mutation CreatePredictionTournament($input: CreatePredictionTournamentInput!) {\n          createPredictionTournament(input: $input) { ok tournament { __typename\n          ...predictionTournamentFragment } errors { message } } }  fragment\n          predictionTournamentFragment on PredictionTournament { tournamentId name status themeId\n          }");
    public static final d H = new d("76402ae44f37", "CreateProfilePostWithVideo", "mutation CreateProfilePostWithVideo($input: CreatePostInput!) {\n          createProfilePost(input: $input) { websocketUrl fieldErrors { field message } } }");
    public static final d I = new d("b7a024675444", "CreateRandomAvatar", "mutation CreateRandomAvatar($input: AvatarRandomGenerationInput!) {\n          createRandomAvatar(input: $input) { imageUrl accessoryIds ok errors { message } }\n          }");
    public static final d J = new d("96a30cec9a39", "CreateRecurringScheduledPost", "mutation CreateRecurringScheduledPost($input: CreateScheduledPostInput!) {\n          createScheduledPost(input: $input) { ok scheduledPost { __typename\n          ...scheduledPostFragment } } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment scheduledPostFragment on ScheduledPost {\n          id title body postKind isSpoiler isNsfw isOriginalContent isSendReplies sticky\n          distinguishedAs flair { type text textColor richtext template { backgroundColor cssClass\n          id isEditable isModOnly text textColor type richtext } } subreddit { __typename id name\n          ... on Subreddit { path prefixedName } } clientTimezone frequency interval byMonthDays\n          byWeekDays publishAt owner { __typename id ... on Redditor { prefixedName name } }\n          contentType state url mediaAssets { __typename ...mediaAssetFragment } }");
    public static final d K = new d("02ab047b2370", "CreateScheduledPostLink", "mutation CreateScheduledPostLink($input: CreateScheduledPostInput!) {\n          createScheduledPost(input: $input) { ok scheduledPost { __typename\n          ...scheduledPostFragment } } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment scheduledPostFragment on ScheduledPost {\n          id title body postKind isSpoiler isNsfw isOriginalContent isSendReplies sticky\n          distinguishedAs flair { type text textColor richtext template { backgroundColor cssClass\n          id isEditable isModOnly text textColor type richtext } } subreddit { __typename id name\n          ... on Subreddit { path prefixedName } } clientTimezone frequency interval byMonthDays\n          byWeekDays publishAt owner { __typename id ... on Redditor { prefixedName name } }\n          contentType state url mediaAssets { __typename ...mediaAssetFragment } }");
    public static final d L = new d("c5d788128f1e", "CreateStandaloneScheduledPost", "mutation CreateStandaloneScheduledPost($input: CreateScheduledPostInput!) {\n          createScheduledPost(input: $input) { ok errors { message } scheduledPost {\n          __typename ...scheduledPostFragment } } }  fragment mediaSourceFragment on MediaSource {\n          url dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename\n          id status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment scheduledPostFragment on ScheduledPost {\n          id title body postKind isSpoiler isNsfw isOriginalContent isSendReplies sticky\n          distinguishedAs flair { type text textColor richtext template { backgroundColor cssClass\n          id isEditable isModOnly text textColor type richtext } } subreddit { __typename id name\n          ... on Subreddit { path prefixedName } } clientTimezone frequency interval byMonthDays\n          byWeekDays publishAt owner { __typename id ... on Redditor { prefixedName name } }\n          contentType state url mediaAssets { __typename ...mediaAssetFragment } }");
    public static final d M = new d("26aa8f546be0", "CreateStorefrontOrder", "mutation CreateStorefrontOrder($input: CreateStorefrontOrderInput!) {\n          createStorefrontOrder(input: $input) { ok errors { message code } order { id\n          orderedProduct { productId } } } }");
    public static final d N = new d("84fcc92063e6", "CreateSubredditPostWithVideo", "mutation CreateSubredditPostWithVideo($input: CreateSubredditPostInput!) {\n          createSubredditPost(input: $input) { websocketUrl fieldErrors { field message } }\n          }");
    public static final d O = new d("2f82c8223eb3", "CreatorStats", "query CreatorStats($postId: ID!) { postStatsById(postId: $postId) { __typename\n          ...PostStatsFragment } postInfoById(id: $postId) { __typename ...PostInfoFragment\n          ... on SubredditPost { otherDiscussions { edges { node { __typename ...PostInfoFragment }\n          } } } ... on ProfilePost { otherDiscussions { edges { node { __typename\n          ...PostInfoFragment } } } } } }  fragment CreatorStatsAvailabilityFragment on\n          CreatorStatsAvailability { availableAt isAvailable }  fragment\n          CreatorStatsTrendDataFragment on CreatorStatsTrendData { at value }  fragment\n          PostStatsFragment on PostStats { id shareAllCountTotals { totalCount availability {\n          __typename ...CreatorStatsAvailabilityFragment } } shareCopyCountTotals { totalCount\n          availability { __typename ...CreatorStatsAvailabilityFragment } } viewCountTotals {\n          totalCount availability { __typename ...CreatorStatsAvailabilityFragment } }\n          viewCountTrends { availability { __typename ...CreatorStatsAvailabilityFragment } data {\n          __typename ...CreatorStatsTrendDataFragment } } }  fragment PostInfoFragment on PostInfo {\n          __typename id title isNsfw permalink crosspostCount ... on SubredditPost { content { html\n          markdown } thumbnail { url } subreddit { id prefixedName styles { icon } } } ... on\n          ProfilePost { content { html markdown } thumbnail { url } authorInfo { __typename ... on\n          Redditor { id prefixedName icon { url } snoovatarIcon { url } } } } }");
    public static final d P = new d("16e1803b7e06", "DeleteChatMessage", "mutation DeleteChatMessage($input: DeleteChatMessageInput!) {\n          deleteChatMessage(input: $input) { ok } }");
    public static final d Q = new d("2f933af7b7ee", "DeleteComment", "mutation DeleteComment($input: DeleteCommentInput!) { deleteComment(input:\n          $input) { ok errors { message } } }");
    public static final d R = new d("63e2db7222c0", "DeleteCustomEmoji", "mutation DeleteCustomEmoji($input: DeleteCustomEmojiInput!) {\n          deleteCustomEmoji(input: $input) { ok errors { message } } }");
    public static final d S = new d("b2accab68d30", "DeleteInboxNotifications", "mutation DeleteInboxNotifications($input: DeleteInboxNotificationsInput!) {\n          deleteInboxNotifications(input: $input) { ok errors { message } } }");
    public static final d T = new d("273bffbed898", "DeletePost", "mutation DeletePost($input: DeletePostInput!) { deletePost(input: $input) { ok\n          } }");
    public static final d U = new d("7e8a24552ee8", "DeleteScheduledPost", "mutation DeleteScheduledPost($input: DeleteScheduledPostInput!) {\n          deleteScheduledPost(input: $input) { ok errors { message } } }");
    public static final d V = new d("62b9b3e55ebc", "DeleteSocialLinks", "mutation DeleteSocialLinks($input: DeleteSocialLinksInput!) {\n          deleteSocialLinks(input: $input) { ok errors { message } socialLinks { __typename\n          ...socialLinkFragment } } }  fragment socialLinkFragment on SocialLink { id type title\n          handle outboundUrl }");
    public static final d W = new d("593af6696289", "DestroyInviteLink", "mutation DestroyInviteLink($input: DestroyChatChannelInviteLinksInput!) {\n          destroyChatChannelInviteLinks(input: $input) { ok } }");
    public static final d X = new d("3e7af302c192", "DiscoverFeedElements", "query DiscoverFeedElements($before: String, $after: String, $pageSize:\n          Int, $last: Int, $topicSlug: String, $includeTopics: Boolean!,\n          $includeRecommendation: Boolean!, $includeSubscribedSubreddits: Boolean!,\n          $includeSubredditInPosts: Boolean = true , $subscribedSubredditsCount: Int =\n          100 , $seed: DiscoverFeedSeedInput, $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { identity @include(if:\n          $includeSubscribedSubreddits) { subscribedSubreddits(first:\n          $subscribedSubredditsCount) { edges { node { __typename ...subredditFragment } } } }\n          discover { discoverElements(before: $before, after: $after, first:\n          $pageSize, last: $last, topicSlug: $topicSlug, seed: $seed) {\n          topics @include(if: $includeTopics) { name slug } elements { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ... on DiscoverPost { __typename\n          ...discoverPostFragment } ... on RecommendationCarouselElement @include(if:\n          $includeRecommendation) { id title description { richtext } link type\n          recommendations { __typename ...discoverPostFragment } }\n          ...discoverRelatedCommunitiesFragment } } } } } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment subredditFragment on Subreddit {\n          id name prefixedName isQuarantined title type subscribersCount isNsfw isSubscribed\n          isThumbnailsEnabled isFavorite path styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } primaryColor bannerBackgroundImage legacyBannerBackgroundImage\n          legacyPrimaryColor } modPermissions { isAccessEnabled } isTitleSafe isUserBanned\n          isMediaInCommentsSettingShown allowedMediaInComments isMuted isChannelsEnabled }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment imageAssetFragment on\n          ImageAsset { __typename id status mimetype width height url small: preview(maxWidth: 108)\n          { __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          crosspostContentFragment on Post { __typename ...postContentFragment ... on SubredditPost\n          { subreddit { __typename ...subredditFragment } } }  fragment\n          promotedCommunityPostFragment on AdPost { promotedCommunityPost { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment promotedUserPostFragment on AdPost { promotedUserPosts { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment postFragment on Post { __typename ...postContentFragment ... on SubredditPost {\n          subreddit @include(if: $includeSubredditInPosts) { __typename ...subredditFragment }\n          } crosspostRoot { type post { __typename ...crosspostContentFragment } } ... on AdPost {\n          __typename ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          discoverPostFragment on DiscoverPost { id topic { name slug } postInfo { __typename\n          ...postFragment } }  fragment discoverRelatedCommunitiesFragment on\n          CommunityRecommendationsElement { id modelVersion communityRecommendations { __typename\n          ... on CommunityRecommendation { id usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }");
    public static final d Y = new d("d6a3201f7a51", "DownloadAvatar", "mutation DownloadAvatar($input: AvatarDownloadInput!) { downloadAvatar(input:\n          $input) { ok imageUrl errors { message } } }");
    public static final d Z = new d("2e8ad3917648", "DownvotedPosts", "query DownvotedPosts($after: String, $pageSize: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { identity { downvotedPosts(after:\n          $after, first: $pageSize) { pageInfo { __typename ...pageInfoFragment } edges\n          { node { __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d f38441a0 = new d("f2b5c944c9cc", "EconAvatarMarketingEvents", "query EconAvatarMarketingEvents { econSpecialEvents { __typename avatarMarketingEvents { id\n          startsAt endsAt name text mobileAssetUrls tags } } identity { createdAt redditor {\n          snoovatarIcon { url } } } }");
    public static final d f38445b0 = new d("798a6ab98550", "EconSpecialEventsWithFreeAwards", "query EconSpecialEventsWithFreeAwards { econSpecialEvents { __typename\n          ...econSpecialEventsFragment } freeAwards { awards { __typename ...awardFragment\n          ...awardDetailsFragment subreddit { id } } } }  fragment econSpecialEventsFragment on\n          EconSpecialEvents { freeAwardEvent { isEnabled startsAt } coinSale { ctaText } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat icon_16:\n          icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }");
    public static final d f38448c0 = new d("67cb65eb8831", "EndPredictionTournament", "mutation EndPredictionTournament($input: EndPredictionTournamentInput!) {\n          endPredictionTournament(input: $input) { ok errors { message } tournament {\n          __typename ...predictionTournamentFragment } } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }");
    public static final d f38452d0 = new d("aa0989f76ae4", "ExposeExperiments", "mutation ExposeExperiments($inputs: [ExposeVariantInput!]!) {\n          exposeExperimentBatch(inputs: $inputs) { payloads { ok } } }");
    public static final d f38456e0 = new d("af65634a3067", "FetchActiveCoinSale", "query FetchActiveCoinSale { coinSale { endsAt heroText heroSubtext mobileHeroImageUrl }\n          }");
    public static final d f38460f0 = new d("70390f538de4", "FindDirectRoom", "query FindDirectRoom($chatSystem: ChatSystem!, $userKindWithId: ID!) {\n          directChatRoom(chatSystem: $chatSystem, interlocutorId: $userKindWithId) { id\n          replicationInfo { status correspondingRoomId } } }");
    public static final d f38464g0 = new d("43ed2a42fc25", "FollowedByRedditors", "query FollowedByRedditors($limit: Int, $from: String, $searchQuery:\n          String) { identity { followedByRedditorsInfo(first: $limit, after: $from,\n          searchQuery: $searchQuery) { edges { node { __typename ...redditorFragment ... on\n          Redditor { displayName isFollowed karma { total } isAcceptingFollowers } } } pageInfo {\n          endCursor } } } }  fragment mediaSourceFragment on MediaSource { url dimensions { width\n          height } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth:\n          24) { __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }");
    public static final d f38468h0 = new d("62c085401bc1", "GenerateCustomEmojiUploadLease", "mutation GenerateCustomEmojiUploadLease($input: GenerateCustomEmojiLeaseInput!) {\n          generateCustomEmojiUploadLease(input: $input) { ok s3UploadLease { action fields {\n          name value } } errors { message } } }");
    public static final d f38472i0 = new d("1ddd8cf83621", "GeoContributableSubreddits", "query GeoContributableSubreddits($after: String, $pageSize: Int) {\n          geoContributableSubreddits(after: $after, first: $pageSize) { pageInfo {\n          __typename ...pageInfoFragment } edges { node { __typename ...subredditFragment\n          publicDescriptionText geoPlace { id name source } modPermissions { isAllAllowed\n          isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed isMailEditingAllowed\n          isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed isChatOperator\n          isChannelsEditingAllowed isCommunityChatEditingAllowed } } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment subredditFragment on Subreddit {\n          id name prefixedName isQuarantined title type subscribersCount isNsfw isSubscribed\n          isThumbnailsEnabled isFavorite path styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } primaryColor bannerBackgroundImage legacyBannerBackgroundImage\n          legacyPrimaryColor } modPermissions { isAccessEnabled } isTitleSafe isUserBanned\n          isMediaInCommentsSettingShown allowedMediaInComments isMuted isChannelsEnabled }");
    public static final d f38476j0 = new d("035e6deb315a", "GetAchievementFlairsStatus", "query GetAchievementFlairsStatus($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { achievementFlairsStatus { isEnabled\n          } } } }");
    public static final d f38480k0 = new d("9b1acf5d6dbb", "GetAllExperimentVariants", "query GetAllExperimentVariants { experimentVariants { id name experimentName version } }");
    public static final d f38484l0 = new d("8c0dc6d5c30f", "GetAvatarStorefront", "query GetAvatarStorefront { avatarStorefront { __typename storefrontStatus\n          ...gqlStorefrontPriceBoundsRoot featured: listings(filter: { theme: FEATURED } , first: 9)\n          { __typename ...gqlStorefrontListings } popular: listings(filter: { theme: POPULAR } ,\n          first: 9) { __typename ...gqlStorefrontListings } gallery: listings(filter: { status:\n          AVAILABLE } , first: 9) { __typename ...gqlStorefrontListings } artists { __typename\n          ...gqlStorefrontArtistsWithListings } } }  fragment gqlStorefrontPriceInfo on\n          StorefrontPriceInfo { price googleExternalProductId }  fragment gqlStorefrontPriceBounds\n          on StorefrontPriceTier { priceLowerBound { __typename ...gqlStorefrontPriceInfo }\n          priceUpperBound { __typename ...gqlStorefrontPriceInfo } }  fragment\n          gqlStorefrontPriceBoundsRoot on AvatarStorefront { prices { __typename\n          ...gqlStorefrontPriceBounds } }  fragment gqlPricePackage on ProductPurchasePackage { id\n          externalProductId requiredPaymentProviders currency price quantity }  fragment\n          gqlStorefrontListing on StorefrontListing { id totalQuantity soldQuantity badges\n          productOffer { pricePackages { __typename ...gqlPricePackage } } status item { id name\n          artist { redditorInfo { id } } benefits { avatarOutfit { id preRenderImage { url }\n          backgroundImage { url } } } } expiresAt }  fragment gqlStorefrontListings on\n          StorefrontListingConnection { pageInfo { startCursor } edges { node { __typename\n          ...gqlStorefrontListing } } }  fragment gqlStorefrontArtist on StorefrontArtist {\n          redditorInfo { __typename id displayName ... on Redditor { name profile { title isNsfw\n          publicDescriptionText } icon { url } snoovatarIcon { url } } } }  fragment\n          gqlStorefrontArtistWithListings on StorefrontArtist { __typename ...gqlStorefrontArtist\n          listings(first: 9) { __typename ...gqlStorefrontListings } }  fragment\n          gqlStorefrontArtistsWithListings on StorefrontArtistConnection { edges { node { __typename\n          ...gqlStorefrontArtistWithListings } } }");
    public static final d f38488m0 = new d("6e312c29f59b", "GetAvatarStorefrontArtistWithListings", "query GetAvatarStorefrontArtistWithListings($id: ID!) { avatarStorefront { artist:\n          artists(filter: { ids: [$id] } ) { edges { node { __typename ...gqlStorefrontArtist\n          listings { __typename ...gqlStorefrontListings } } } } } }  fragment gqlStorefrontArtist\n          on StorefrontArtist { redditorInfo { __typename id displayName ... on Redditor { name\n          profile { title isNsfw publicDescriptionText } icon { url } snoovatarIcon { url } } } } \n          fragment gqlPricePackage on ProductPurchasePackage { id externalProductId\n          requiredPaymentProviders currency price quantity }  fragment gqlStorefrontListing on\n          StorefrontListing { id totalQuantity soldQuantity badges productOffer { pricePackages {\n          __typename ...gqlPricePackage } } status item { id name artist { redditorInfo { id } }\n          benefits { avatarOutfit { id preRenderImage { url } backgroundImage { url } } } }\n          expiresAt }  fragment gqlStorefrontListings on StorefrontListingConnection { pageInfo {\n          startCursor } edges { node { __typename ...gqlStorefrontListing } } }");
    public static final d f38492n0 = new d("bf4c8ac58d1f", "GetAvatarStorefrontDynamic", "query GetAvatarStorefrontDynamic($listingsQueries: [StorefrontBatchListingsQuery!],\n          $artistsQueries: [StorefrontBatchArtistsQuery!]) { avatarStorefront { __typename\n          storefrontStatus ...gqlStorefrontPriceBoundsRoot batchArtists(queries:\n          $artistsQueries) { sectionId artists { __typename\n          ...gqlStorefrontArtistsWithListings } } batchListings(queries: $listingsQueries) {\n          sectionId listings { __typename ...gqlStorefrontListings } } } }  fragment\n          gqlStorefrontPriceInfo on StorefrontPriceInfo { price googleExternalProductId }  fragment\n          gqlStorefrontPriceBounds on StorefrontPriceTier { priceLowerBound { __typename\n          ...gqlStorefrontPriceInfo } priceUpperBound { __typename ...gqlStorefrontPriceInfo } } \n          fragment gqlStorefrontPriceBoundsRoot on AvatarStorefront { prices { __typename\n          ...gqlStorefrontPriceBounds } }  fragment gqlStorefrontArtist on StorefrontArtist {\n          redditorInfo { __typename id displayName ... on Redditor { name profile { title isNsfw\n          publicDescriptionText } icon { url } snoovatarIcon { url } } } }  fragment gqlPricePackage\n          on ProductPurchasePackage { id externalProductId requiredPaymentProviders currency price\n          quantity }  fragment gqlStorefrontListing on StorefrontListing { id totalQuantity\n          soldQuantity badges productOffer { pricePackages { __typename ...gqlPricePackage } }\n          status item { id name artist { redditorInfo { id } } benefits { avatarOutfit { id\n          preRenderImage { url } backgroundImage { url } } } } expiresAt }  fragment\n          gqlStorefrontListings on StorefrontListingConnection { pageInfo { startCursor } edges {\n          node { __typename ...gqlStorefrontListing } } }  fragment gqlStorefrontArtistWithListings\n          on StorefrontArtist { __typename ...gqlStorefrontArtist listings(first: 9) { __typename\n          ...gqlStorefrontListings } }  fragment gqlStorefrontArtistsWithListings on\n          StorefrontArtistConnection { edges { node { __typename ...gqlStorefrontArtistWithListings\n          } } }");
    public static final d f38496o0 = new d("d23e676c332f", "GetAvatarStorefrontDynamicLayout", "query GetAvatarStorefrontDynamicLayout { avatarStorefront { layout(platform: ANDROID) {\n          layoutJson } } }");
    public static final d p0 = new d("c59285df2128", "GetAvatarStorefrontLegacy", "query GetAvatarStorefrontLegacy($ids: [ID!]) { avatarStorefront { artists(filter: {\n          ids: $ids } ) { edges { node { __typename ...gqlStorefrontArtist } } } listings {\n          edges { node { __typename ...gqlStorefrontListing } } } } }  fragment gqlStorefrontArtist\n          on StorefrontArtist { redditorInfo { __typename id displayName ... on Redditor { name\n          profile { title isNsfw publicDescriptionText } icon { url } snoovatarIcon { url } } } } \n          fragment gqlPricePackage on ProductPurchasePackage { id externalProductId\n          requiredPaymentProviders currency price quantity }  fragment gqlStorefrontListing on\n          StorefrontListing { id totalQuantity soldQuantity badges productOffer { pricePackages {\n          __typename ...gqlPricePackage } } status item { id name artist { redditorInfo { id } }\n          benefits { avatarOutfit { id preRenderImage { url } backgroundImage { url } } } }\n          expiresAt }");
    public static final d f38503q0 = new d("b33e99cfbf02", "GetChatMessageReactionIcons", "query GetChatMessageReactionIcons($query: String!, $first: Int) {\n          searchChatMessageReactionIcons(query: $query, first: $first) { edges { node {\n          url key altText } } } }");
    public static final d f38507r0 = new d("b83ad4cbdf1c", "GetCommentById", "query GetCommentById($id: ID!, $includeAwards: Boolean = true ) {\n          commentById(id: $id) { __typename ...commentFragment } }  fragment\n          redditorNameFragment on RedditorInfo { __typename ... on Redditor { id name prefixedName }\n          ... on UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment groupAwardFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }\n           fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename ...\n          on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment commentFragment on Comment { id createdAt editedAt parent { id }\n          postInfo { __typename id title ... on SubredditPost { subreddit { id name prefixedName } }\n          ... on ProfilePost { profile { redditorInfo { __typename ...redditorNameFragment } } } }\n          isLocked isInitiallyCollapsed initiallyCollapsedReason content { __typename markdown html\n          richtext typeHint ...richtextMediaFragment } authorInfo { __typename ...authorInfoFragment\n          } score voteState authorFlair { __typename ...authorFlairFragment } isSaved isStickied\n          isScoreHidden awardings @include(if: $includeAwards) { __typename\n          ...awardingTotalFragment } associatedAward { __typename ...awardFragment } treatmentTags\n          isArchived distinguishedAs permalink moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment ...proxyAuthorInfoFragment ... on\n          CommentModerationInfo { isAutoCollapsedFromCrowdControl } verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount isRemoved\n          ...lastAuthorModNoteFragment } }");
    public static final d f38511s0 = new d("00768e4d75a4", "GetCommentByIdWithChildren", "query GetCommentByIdWithChildren($id: ID!, $sortType: CommentSort,\n          $after: String, $maxDepth: Int, $count: Int, $includeAwards:\n          Boolean = true ) { commentById(id: $id) { postInfo { __typename\n          ...pdsBasicPostInfoFragment } children(after: $after, count: $count, depth:\n          $maxDepth, sort: $sortType) { __typename ...commentForestTreesFragment } } } \n          fragment redditorNameFragment on RedditorInfo { __typename ... on Redditor { id name\n          prefixedName } ... on UnavailableRedditor { id name } ... on DeletedRedditor { id name } }\n           fragment pdsBasicPostInfoFragment on PostInfo { __typename id ... on SubredditPost {\n          subreddit { id name prefixedName } } ... on ProfilePost { profile { redditorInfo {\n          __typename ...redditorNameFragment } } } }  fragment mediaSourceFragment on MediaSource {\n          url dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename\n          id status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment groupAwardFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }\n           fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename ...\n          on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment commentFragment on Comment { id createdAt editedAt parent { id }\n          postInfo { __typename id title ... on SubredditPost { subreddit { id name prefixedName } }\n          ... on ProfilePost { profile { redditorInfo { __typename ...redditorNameFragment } } } }\n          isLocked isInitiallyCollapsed initiallyCollapsedReason content { __typename markdown html\n          richtext typeHint ...richtextMediaFragment } authorInfo { __typename ...authorInfoFragment\n          } score voteState authorFlair { __typename ...authorFlairFragment } isSaved isStickied\n          isScoreHidden awardings @include(if: $includeAwards) { __typename\n          ...awardingTotalFragment } associatedAward { __typename ...awardFragment } treatmentTags\n          isArchived distinguishedAs permalink moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment ...proxyAuthorInfoFragment ... on\n          CommentModerationInfo { isAutoCollapsedFromCrowdControl } verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount isRemoved\n          ...lastAuthorModNoteFragment } }  fragment commentForestTreesFragment on CommentForest {\n          trees { depth more { count cursor isTooDeepForCount } parentId node { __typename\n          ...commentFragment } childCount } }");
    public static final d f38515t0 = new d("f40f533cbd0e", "GetCustomEmojis", "query GetCustomEmojis($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { id name customEmojis { mediaPacks {\n          id name emotes { name emojiIcon { url mimeType x y } stickerIcon { url mimeType x y } } }\n          } } } }");
    public static final d f38519u0 = new d("7d204cf36d95", "GetCustomEmojisStatus", "query GetCustomEmojisStatus($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { customEmojisStatus { isEnabled } } }\n          }");
    public static final d f38523v0 = new d("015e7d032087", "GetInboxNotificationFeed", "query GetInboxNotificationFeed($pageSize: Int!, $after: String,\n          $subredditIconMaxWidth: MaxWidthValue!) { notificationInbox { elements(first:\n          $pageSize, after: $after) { pageInfo { endCursor hasNextPage } edges { cursor\n          node { __typename id ...inboxBannerNotificationFragment ... on InboxNotification { title\n          body deeplinkUrl icon sentAt readAt viewedAt avatar { url isNsfw } isHideNotifEligible\n          isToggleMessageTypeEligible isToggleNotificationUpdateEligible\n          isToggleUpdateFromSubredditEligible isToggleLowUpdateFromSubredditEligible context {\n          __typename messageType ... on PostInboxNotificationContext { post { __typename\n          ...inboxFeedPostInfoFragment } isBodyHidden isPostHidden } ... on\n          PostSubredditInboxNotificationContext { post { __typename ...inboxFeedPostInfoFragment }\n          subreddit { id } isBodyHidden isPostHidden } ... on CommentInboxNotificationContext {\n          comment { parent { id } } } ... on SubredditInboxNotificationContext { subreddit { id } }\n          ... on AwardReceivedInboxNotificationContext { awarding { id award { id } awarderInfo {\n          __typename id ... on Redditor { isAcceptingChats } } target { __typename ... on PostInfo {\n          permalink title } ... on Comment { permalink } } } } } } } } } } }  fragment\n          inboxBannerNotificationFragment on InboxBannerNotification { applicablePlatforms {\n          platform minimumVersion } bodyText { text colorHex } bodyBackgroundImage linkUrl\n          notificationName persistence { isDismissible maxViews } primaryCta { actionType colors {\n          activeHex backgroundHex borderHex hoverHex } text { text colorHex } url } secondaryCta {\n          actionType colors { activeHex backgroundHex borderHex hoverHex } text { text colorHex }\n          url } thumbnailImageUrl titleImage titleText { text colorHex } }  fragment\n          inboxFeedPostInfoFragment on PostInfo { __typename id title score commentCount isNsfw\n          isSpoiler removedByCategory ... on Post { thumbnail { url } media { obfuscated {\n          content(maxWidth: $subredditIconMaxWidth) { url } } } } }");
    public static final d f38527w0 = new d("377b63f2930c", "GetInboxNotificationFeedForReceiveEvents", "query GetInboxNotificationFeedForReceiveEvents($pageSize: Int!, $after: String)\n          { notificationInbox { elements(first: $pageSize, after: $after) { edges { node\n          { __typename id ... on InboxNotification { context { __typename messageType ... on\n          AwardReceivedInboxNotificationContext { awarding { award { id } } } } readAt viewedAt } }\n          } } } }");
    public static final d f38531x0 = new d("1741dee3c84b", "GetInventoryItemsByIds", "query GetInventoryItemsByIds($ids: [ID!]) { inventoryItems(filter: { ids: $ids\n          } ) { edges { node { __typename ...inventoryItemFragment } } } }  fragment\n          inventoryItemFragment on InventoryItem { id name tags serialNumber owner { id displayName\n          } artist { redditorInfo { __typename id displayName ... on Redditor { prefixedName icon {\n          url } snoovatarIcon { url } profile { title publicDescriptionText } } } } benefits {\n          avatarOutfit { id preRenderImage { url } backgroundImage { url } } } drop { size rarity }\n          nft { contractAddress title description externalUrls series mintedAt tokenUrl tokenId\n          imageUrl wallet { address } } }");
    public static final d f38535y0 = new d("57e15486b3f3", "GetLinkTitle", "query GetLinkTitle($url: URL!) { urlMetadata(url: $url) { title } }");
    public static final d f38539z0 = new d("642729a05463", "GetMatrixChatUsersByIds", "query GetMatrixChatUsersByIds($userKindWithIds: [ID!]!) { redditorsInfoByIds(ids:\n          $userKindWithIds) { __typename id ... on Redditor { name icon { url } snoovatarIcon\n          { url } profile { isNsfw } karma { total } cakeDayOn isBlocked isAcceptingChats } ... on\n          UnavailableRedditor { name } ... on DeletedRedditor { name } } }");
    public static final d A0 = new d("5ec8e51a973a", "GetModPnSettingsLayout", "query GetModPnSettingsLayout($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { modPnSettingsLayout { id page {\n          __typename ...modPnSettingsRowFragment sections { __typename\n          ...modPnSettingSectionFragment rows { __typename ...modPnSettingsRowFragment ... on\n          ModPnSettingsLayoutRowPage { sections { __typename ...modPnSettingSectionFragment rows {\n          __typename ...modPnSettingsRowFragment ... on ModPnSettingsLayoutRowPage { sections {\n          __typename ...modPnSettingSectionFragment rows { __typename ...modPnSettingsRowFragment\n          ... on ModPnSettingsLayoutRowPage { sections { __typename ...modPnSettingSectionFragment\n          rows { __typename ...modPnSettingsRowFragment ... on ModPnSettingsLayoutRowPage { sections\n          { __typename ...modPnSettingSectionFragment rows { __typename ...modPnSettingsRowFragment\n          } } } } } } } } } } } } } } } } } } }  fragment modPnSettingsRowFragment on\n          ModPnSettingsLayoutRow { __typename ... on ModPnSettingsLayoutRowRange { id title\n          description icon ranges rangeTitle rangeSubtitle currentRange isAuto thresholdName } ...\n          on ModPnSettingsLayoutRowToggle { id title description icon isEnabled isAuto statusName }\n          ... on ModPnSettingsLayoutRowSectionToggle { id title description icon isEnabled isAuto\n          statusName } ... on ModPnSettingsLayoutRowPage { id title description icon displayValue }\n          }  fragment modPnSettingSectionFragment on ModPnSettingsLayoutSection { id title }");
    public static final d B0 = new d("2076e062c891", "GetMuxedMP4", "query GetMuxedMP4($linkId: String!) { packagedVideoUrlByLinkId(format: MUXED_MP4,\n          linkId: $linkId) { url } }");
    public static final d C0 = new d("a755df340816", "GetPostRequirements", "query GetPostRequirements($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { postRequirements(id:\n          $subredditId) { __typename ...postRequirementsFragment } } } }  fragment\n          postRequirementsFragment on PostRequirements { bodyBlacklistedStrings bodyRegexes\n          bodyRequiredStrings bodyRestrictionPolicy domainBlacklist domainWhitelist\n          galleryCaptionsRequirement galleryMaxItems galleryMinItems galleryUrlsRequirement\n          guidelinesText isFlairRequired linkRepostAge linkRestrictionPolicy titleBlacklistedStrings\n          titleRegexes titleRequiredStrings titleTextMaxLength titleTextMinLength }");
    public static final d D0 = new d("b4dbae0aed2c", "GetPredictionChipPackages", "query GetPredictionChipPackages($postId: ID!) { postInfoById(id: $postId) {\n          __typename ... on Post { predictionChipPackages { id name amount currency } } } }");
    public static final d E0 = new d("8bbd8c3b86b6", "GetPredictionTokens", "query GetPredictionTokens($tournamentId: ID!) { identity {\n          predictionTokens(tournamentId: $tournamentId) } }");
    public static final d F0 = new d("b1e9eb98e8a8", "GetPredictionTournaments", "query GetPredictionTournaments($subredditName: String!, $isLatestOnly:\n          Boolean!, $tournamentId: String, $isIncludingPredictions: Boolean!,\n          $isIncludingCancelledPredictions: Boolean!, $includeSubredditInPosts: Boolean\n          = true , $isIncludingParticipants: Boolean = false , $includeAwards: Boolean =\n          true , $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean =\n          false , $includePostStats: Boolean = false ) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { styles { icon primaryColor }\n          predictionTournaments(isLatestOnly: $isLatestOnly, tournamentId:\n          $tournamentId, isIncludingPredictions: $isIncludingPredictions,\n          isIncludingParticipants: $isIncludingParticipants, isIncludingCancelledPredictions:\n          $isIncludingCancelledPredictions) { __typename ...predictionTournamentFragment\n          totalParticipantsCount latestParticipants { __typename ...redditorFragment }\n          predictionPosts { __typename ...postFragment } } } } }  fragment\n          predictionTournamentFragment on PredictionTournament { tournamentId name status themeId } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth: 72) { __typename\n          ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename ...mediaSourceFragment }\n          icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment } icon_144:\n          icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionOptionFragment on\n          PredictionOption { id text voteCount totalStakeAmount redditorStakeAmount }  fragment\n          predictionFragment on Prediction { id status title isNsfw isSpoiler options { __typename\n          ...predictionOptionFragment } createdAt endsAt selectedOptionId totalVoteCount\n          totalStakeAmount wonAmount resolvedOptionId voteUpdatesRemained }  fragment\n          predictionTournamentPostFragment on PredictionTournament { __typename\n          ...predictionTournamentFragment predictions { __typename ...predictionFragment } } \n          fragment audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d G0 = new d("7073312abcb8", "GetStorefrontAuthorsOfListings", "query GetStorefrontAuthorsOfListings($filter: StorefrontListingsFilter) {\n          avatarStorefront { listings(filter: $filter) { edges { node { artist { __typename\n          ...gqlStorefrontArtistReduced } } } } } }  fragment gqlStorefrontArtistReduced on\n          StorefrontArtist { redditorInfo { __typename id displayName ... on Redditor { profile {\n          title isNsfw } icon { url } snoovatarIcon { url } } } }");
    public static final d H0 = new d("ca55449a5997", "GetStorefrontAvatarBuilderCatalog", "query GetStorefrontAvatarBuilderCatalog { avatarBuilderCatalog { outfits { id acquiredAt\n          state inventoryItem { id } } } }");
    public static final d I0 = new d("3290fe638197", "GetStorefrontListingItemById", "query GetStorefrontListingItemById($ids: [ID!]) { avatarStorefront { listings(filter:\n          { ids: $ids } ) { edges { node { id totalQuantity item { __typename\n          ...inventoryItemFragment } productOffer { pricePackages { id price currency quantity\n          externalProductId requiredPaymentProviders } } status } } } } }  fragment\n          inventoryItemFragment on InventoryItem { id name tags serialNumber owner { id displayName\n          } artist { redditorInfo { __typename id displayName ... on Redditor { prefixedName icon {\n          url } snoovatarIcon { url } profile { title publicDescriptionText } } } } benefits {\n          avatarOutfit { id preRenderImage { url } backgroundImage { url } } } drop { size rarity }\n          nft { contractAddress title description externalUrls series mintedAt tokenUrl tokenId\n          imageUrl wallet { address } } }");
    public static final d J0 = new d("39e3a4ecfe19", "GetSubredditAchievementFlairs", "query GetSubredditAchievementFlairs($subredditName: String!) {\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit {\n          subredditAchievementFlairs { __typename ...subredditAchievementFlair } } } }  fragment\n          subredditMediaIcon on SubredditMediaIcon { url mimeType }  fragment\n          subredditAchievementFlair on SubredditAchievementFlair { name type category description\n          icon { __typename ...subredditMediaIcon } }");
    public static final d K0 = new d("180e17d4bc30", "GetSubredditChannels", "query GetSubredditChannels($subredditName: String!, $after: String,\n          $pageSize: Int, $includePostChannels: Boolean = false ) {\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit {\n          channels(after: $after, first: $pageSize) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ... on SubredditChatChannel { id icon\n          description name isRestricted permalink roomId } ... on SubredditPostChannel @include(if:\n          $includePostChannels) { id icon description name isRestricted permalink } } } } } }\n          }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor }");
    public static final d L0 = new d("ab4e401bc567", "GetSubredditExperiment", "query GetSubredditExperiment($pageType: ExperimentPageType!, $subredditName:\n          String!, $experimentName: String!) { pageExperimentVariant(pageType:\n          $pageType, subredditName: $subredditName, name: $experimentName) {\n          canonicalUrl experiment { id name experimentName version } } }");
    public static final d M0 = new d("267390ee5f6d", "GetSubredditGeoPlaceBySubredditId", "query GetSubredditGeoPlaceBySubredditId($id: ID!) { subredditInfoById(id: $id)\n          { __typename ... on Subreddit { geoPlace { id name source } } } }");
    public static final d N0 = new d("4bc1c377ad54", "GetSurveyServices", "query GetSurveyServices { customerSurveyConfig { activeSurveys { steps { question\n          questionOptions followUpQuestion type } variants { sampleFactor surveyEnabled\n          triggerThreshold variantName } triggerEvent experimentName } meta { lang client }\n          surveyCooldownDays } }");
    public static final d O0 = new d("eb995321f577", "GetTopKarmaSubreddits", "query GetTopKarmaSubreddits($username: String!) { redditorInfoByName(name:\n          $username) { __typename ... on Redditor { activeSubreddits { id name prefixedName\n          isNsfw subscribersCount isSubscribed karma { fromComments fromPosts } styles {\n          mobileBannerImage bannerBackgroundImage icon primaryColor legacyPrimaryColor } } icon {\n          url } } } }");
    public static final d P0 = new d("0188f636c273", "GetTopicsRecommendation", "query GetTopicsRecommendation($linkId: String, $onboardingFlow: OnboardingFlow)\n          { interestTopicRecommendationsByLinkId(linkId: $linkId, onboardingFlow:\n          $onboardingFlow) { __typename ...interestTopicRecommendationsFragment } }  fragment\n          interestTopicRecommendationsFragment on InterestTopicRecommendations {\n          recommendationTopics { edges { node { id topic { title name } } } } }");
    public static final d Q0 = new d("d24b7f018412", "GetTrendingChatGifs", "query GetTrendingChatGifs($first: Int, $after: String) {\n          trendingChatGifs(first: $first, after: $after) { version provider pageInfo {\n          hasNextPage endCursor } edges { node { id title downsized: source(size: DOWNSIZED) {\n          __typename ...mediaSourceFragment } fixed_height: source(size: FIXED_HEIGHT) { __typename\n          ...mediaSourceFragment } fixed_width: source(size: FIXED_WIDTH) { __typename\n          ...mediaSourceFragment } } } } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }");
    public static final d R0 = new d("b4d7e3c1695a", "GetUserAchievementFlairs", "query GetUserAchievementFlairs($subredditNames: [String!]!, $redditorIds:\n          [ID!]!) { subredditsInfoByNames(names: $subredditNames) { __typename ... on\n          Subreddit { id name userAchievementFlairsByRedditorIds(ids: $redditorIds) {\n          redditorId userAchievementFlairs { __typename ...userAchievementFlair } isHidden } } } } \n          fragment subredditMediaIcon on SubredditMediaIcon { url mimeType }  fragment\n          userAchievementFlair on UserAchievementFlair { name type category icon { __typename\n          ...subredditMediaIcon } isPreferred }");
    public static final d S0 = new d("7e371b12c7b9", "GetWelcomeMessageForSubreddit", "query GetWelcomeMessageForSubreddit($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { __typename ...welcomeMessageFragment }\n          } }  fragment welcomeMessageFragment on Subreddit { welcomeMessage { body { markdown\n          richtext } buttonCtaText isEnabled isRenderedOnJoin } }");
    public static final d T0 = new d("7d84e73ff03f", "GildComment", "mutation GildComment($input: GildInput!) { gild: gildComment(input: $input) {\n          ok coins awardKarmaReceived comment { __typename ... on Comment { treatmentTags awardings\n          { __typename ...awardingTotalFragment award { __typename ...awardFragment\n          ...awardDetailsFragment } } } } errors { message } fieldErrors { field message } } } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat icon_16:\n          icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          awardingTotalFragment on AwardingTotal { award { __typename ...awardFragment } total } \n          fragment groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat\n          icon_96: icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth:\n          128) { __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }");
    public static final d U0 = new d("2e00b1233cbb", "GildPost", "mutation GildPost($input: GildInput!) { gild: gildPost(input: $input) { ok\n          coins awardKarmaReceived awardings { __typename ...awardingTotalFragment award {\n          __typename ...awardFragment ...awardDetailsFragment } } errors { message } fieldErrors {\n          field message } } }  fragment mediaSourceFragment on MediaSource { url dimensions { width\n          height } }  fragment groupAwardFragment on Award { tiers { awardId awardingsRequired\n          iconFormat icon_16: icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24:\n          icon(maxWidth: 24) { __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) {\n          __typename ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment }\n          staticIcon_16: staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment }\n          staticIcon_24: staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          staticIcon_32: staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          staticIcon_48: staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          staticIcon_64: staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment }\n          staticIcon_96: staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } } \n          fragment awardFragment on Award { __typename id name awardType awardSubType iconFormat\n          icon_16: icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth:\n          24) { __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } coinPrice\n          ...groupAwardFragment }  fragment awardingTotalFragment on AwardingTotal { award {\n          __typename ...awardFragment } total }  fragment groupAwardDetailsFragment on Award { tiers\n          { awardId awardingsRequired iconFormat icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } staticIcon_128:\n          staticIcon(maxWidth: 128) { __typename ...mediaSourceFragment } staticIcon_144:\n          staticIcon(maxWidth: 144) { __typename ...mediaSourceFragment } staticIcon_172:\n          staticIcon(maxWidth: 172) { __typename ...mediaSourceFragment } staticIcon_192:\n          staticIcon(maxWidth: 192) { __typename ...mediaSourceFragment } staticIcon_256:\n          staticIcon(maxWidth: 256) { __typename ...mediaSourceFragment } staticIcon_288:\n          staticIcon(maxWidth: 288) { __typename ...mediaSourceFragment } staticIcon_384:\n          staticIcon(maxWidth: 384) { __typename ...mediaSourceFragment } } }  fragment\n          awardDetailsFragment on Award { __typename isEnabled isNew coinPrice daysOfPremium\n          description startsAt endsAt tags stickyDurationSeconds iconFormat\n          ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } }");
    public static final d V0 = new d("2c3917fe9831", "GiveAward", "mutation GiveAward($input: GiveAwardInput!) { giveAward(input: $input) { ok\n          errors { message } awarding { target { __typename ... on PostInfo { awardings { __typename\n          ...awardingByCurrentUserTotalFragment award { __typename ...awardFragment\n          ...awardDetailsFragment } } } ... on Comment { treatmentTags awardings { __typename\n          ...awardingByCurrentUserTotalFragment award { __typename ...awardFragment\n          ...awardDetailsFragment } } } } } receivedKarma } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment groupAwardFragment on Award {\n          tiers { awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          awardingByCurrentUserTotalFragment on AwardingTotal { award { __typename ...awardFragment\n          } awardingByCurrentUser { id } total }  fragment groupAwardDetailsFragment on Award {\n          tiers { awardId awardingsRequired iconFormat icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } staticIcon_128:\n          staticIcon(maxWidth: 128) { __typename ...mediaSourceFragment } staticIcon_144:\n          staticIcon(maxWidth: 144) { __typename ...mediaSourceFragment } staticIcon_172:\n          staticIcon(maxWidth: 172) { __typename ...mediaSourceFragment } staticIcon_192:\n          staticIcon(maxWidth: 192) { __typename ...mediaSourceFragment } staticIcon_256:\n          staticIcon(maxWidth: 256) { __typename ...mediaSourceFragment } staticIcon_288:\n          staticIcon(maxWidth: 288) { __typename ...mediaSourceFragment } staticIcon_384:\n          staticIcon(maxWidth: 384) { __typename ...mediaSourceFragment } } }  fragment\n          awardDetailsFragment on Award { __typename isEnabled isNew coinPrice daysOfPremium\n          description startsAt endsAt tags stickyDurationSeconds iconFormat\n          ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } }");
    public static final d W0 = new d("82e8b773585a", "GlobalProductOffers", "query GlobalProductOffers($productTypes: [DigitalProductType!]) {\n          globalProductOffers(productTypes: $productTypes) { offers { id type name description\n          version tags pricePackages { externalProductId id price quantity currency\n          requiredPaymentProviders skus { __typename name description kind ... on CoinsDripSku {\n          coins duration { __typename ...durationFragment } } ... on CoinsSku { coins coinsReceiver\n          } ... on PremiumSku { subscriptionType duration { __typename ...durationFragment } } } } }\n          } }  fragment durationFragment on Duration { amount unit }");
    public static final d X0 = new d("c26d262f7cb5", "HandleGoogleBilling", "mutation HandleGoogleBilling($input: GoogleBillingEventInput!) {\n          handleGoogleBillingEvent(input: $input) { ok errors { message code errorInputArgs {\n          variableName value } } isFallbackRequired } }");
    public static final d Y0 = new d("99fabfcf3499", "HiddenPosts", "query HiddenPosts($after: String, $pageSize: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { identity { hiddenPosts(after: $after,\n          first: $pageSize) { pageInfo { __typename ...pageInfoFragment } edges { node {\n          __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage\n          endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions { width height }\n          }  fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d Z0 = new d("bdd216470ca0", "HideAwardOnTarget", "mutation HideAwardOnTarget($targetId: ID!, $awardId: ID!) {\n          hideAwardOnTarget(input: { targetId: $targetId awardId: $awardId } ) { ok }\n          }");
    public static final d f38442a1 = new d("769ee26e130d", "HomeElements", "query HomeElements($interestTopicIds: [ID!], $servingId: ID,\n          $positiveSignalSubredditIds: [ID!], $sort: PostFeedSort, $range:\n          PostFeedRange, $after: String, $pageSize: Int, $adContext:\n          AdContextInput, $forceAds: ForceAdsInput, $includeExposureEvents: Boolean =\n          false , $crossPlatformContext: CrossPlatformContextInput,\n          $includeAnnouncements: Boolean = false , $includeSubredditInPosts: Boolean =\n          true , $includeTopicRecommendations: Boolean = false , $includeAwards: Boolean\n          = true , $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean =\n          false , $includePostStats: Boolean = false , $variant: String,\n          $loggedOutAllowNsfw: Boolean, $experienceInputs: [UxTargetingExperience!]!,\n          $advancedConfiguration: UxTargetingAdvancedConfigurationInput!) {\n          featuredAnnouncements @include(if: $includeAnnouncements) { __typename\n          ...featuredAnnouncementFragment } postFeed: home { elements(feedRankingContext: {\n          interestTopicIds: $interestTopicIds servingId: $servingId\n          positiveSignalSubredditIds: $positiveSignalSubredditIds variant: $variant\n          loggedOutAllowNsfw: $loggedOutAllowNsfw } , sort: $sort, time: $range,\n          after: $after, first: $pageSize, adContext: $adContext, forceAds:\n          $forceAds, includeExposureEvents: $includeExposureEvents,\n          crossPlatformContext: $crossPlatformContext, uxTargetingContext: { experienceInputs:\n          $experienceInputs advancedConfiguration: $advancedConfiguration } ) { pageInfo\n          { __typename ...pageInfoFragment } dist edges { node { __typename ...postFragment\n          ...postRecommendationFragment ...feedAnswerableQuestionsFragment\n          ...topicRecommendationsFeedElementFragment @include(if:\n          $includeTopicRecommendations) ...nftBannerFeedFragment ...merchandisingUnitFragment\n          } } } } }  fragment featuredAnnouncementFragment on Announcement { id title description\n          url iconUrl maxImpressionsCount experimentName }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          postRecommendationFragment on PostRecommendation { recommendationContext { __typename\n          content { richtext html } isContextHidden typeIdentifier ... on\n          InterestTopicRecommendationContext { interestTopicNode { id } } ... on\n          SimilarSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          } } } ... on TimeOnSubredditRecommendationContext { subreddit { __typename id ... on\n          Subreddit { name } } } ... on OnboardingPracticeFeedRecommendationContext {\n          interestTopicNode { id topic { name title } } } } postInfo { __typename ...postFragment }\n          }  fragment answerableQuestionAnalyticsDataFragment on Subreddit { modPermissions {\n          isAllAllowed isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed\n          isMailEditingAllowed isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed\n          isChatOperator isChannelsEditingAllowed isCommunityChatEditingAllowed } id name\n          publicDescriptionText isNsfw type originalContentCategories isQuarantined whitelistStatus\n          isSubscribed isFavorite karma { fromComments fromPosts } }  fragment\n          answerableQuestionsFragment on Subreddit { __typename answerableQuestions { id type\n          questionText answerOptions { id text } } ...answerableQuestionAnalyticsDataFragment } \n          fragment feedAnswerableQuestionsFragment on SubredditPost { subreddit { __typename\n          ...answerableQuestionsFragment } }  fragment interestTopicRecommendationsFragment on\n          InterestTopicRecommendations { recommendationTopics { edges { node { id topic { title name\n          } } } } }  fragment topicRecommendationsFeedElementFragment on\n          InterestTopicRecommendationsFeedElement { id topicRecommendations: recommendations {\n          __typename ...interestTopicRecommendationsFragment } }  fragment nftBannerFeedFragment on\n          FreeNftFeedElement { id description buttonCtaText nftTitle: title }  fragment\n          merchandisingUnitFragment on MerchandisingUnit { body cta format id images { __typename\n          ...mediaAssetFragment } title url video { __typename ...mediaAssetFragment } }");
    public static final d f38446b1 = new d("3408a37c569a", "IdentityPowerups", "query IdentityPowerups { identity { __typename ... on Identity { powerups { __typename\n          ...powerupSupporterInfo } } } }  fragment subredditPowerupInfoMin on Subreddit { id name\n          prefixedName styles { icon primaryColor } }  fragment powerupAllocation on\n          PowerupsAllocation { id isPremium allocatedAt cooldownEndsAt renewOn isActive\n          isDeallocationAllowed powerups renewOn subredditInfo { __typename\n          ...subredditPowerupInfoMin } }  fragment powerupSupporterInfo on RedditorPowerupsInfo {\n          allocation { __typename ...powerupAllocation } freeCount }");
    public static final d f38449c1 = new d("bcd8f463ee1a", "InterestTopics", "query InterestTopics($schemeName: String!, $maxDepth: Int!, $first: Int!,\n          $maxChildren: Int!, $overrideSchemeName: String, $onboardingFlow:\n          OnboardingFlow) { interestTopics(schemeName: $schemeName, maxDepth: $maxDepth,\n          first: $first, maxChildren: $maxChildren, overrideSchemeName:\n          $overrideSchemeName, onboardingFlow: $onboardingFlow) { pageInfo { __typename\n          ...pageInfoFragment } schemeName edges { cursor node { id topic { name title parents {\n          nodeId } } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor }");
    public static final d f38453d1 = new d("9ec12eb4ad74", "InterestTopicsByIds", "query InterestTopicsByIds($schemeName: String!, $maxSubreddits: Int!,\n          $topicIds: [ID!]!, $onboardingFlow: OnboardingFlow) {\n          interestTopicsByIds(schemeName: $schemeName, maxSubreddits: $maxSubreddits,\n          topicIds: $topicIds, onboardingFlow: $onboardingFlow) { edges { node { id\n          topic { title name subreddits { edges { node { prefixedName id publicDescriptionText\n          subscribersCount detectedLanguage styles { primaryColor legacyPrimaryColor icon legacyIcon\n          { url } } } } } } } } } }");
    public static final d f38457e1 = new d("1dda6468ff2e", "IsPredictionCreationAllowed", "query IsPredictionCreationAllowed($subredditId: ID!) { identity {\n          isPredictionCreationAllowed(subredditId: $subredditId) } }");
    public static final d f38461f1 = new d("7e00df9289f2", "IsUsernameAvailable", "query IsUsernameAvailable($name: String!) { isUsernameAvailable(name: $name)\n          }");
    public static final d f38465g1 = new d("f07a0441b6fd", "JoinChatChannelWithInviteLink", "mutation JoinChatChannelWithInviteLink($input: JoinChatChannelWithInviteLinkInput!) {\n          joinChatChannelWithInviteLink(input: $input) { channelSendbirdId errors { message }\n          } }");
    public static final d f38469h1 = new d("ac99e5aaad20", "ModQueueItemsWithSort", "query ModQueueItemsWithSort($subredditIds: [ID!], $queueType: ModQueueType!,\n          $sortType: ModQueueSort, $itemTypes: [ModQueueItemType!], $after:\n          String, $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean =\n          true , $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean =\n          false , $includePostStats: Boolean = false ) { modQueueItems(subredditIds:\n          $subredditIds, queueType: $queueType, sort: $sortType, itemTypes:\n          $itemTypes, after: $after) { pageInfo { __typename ...fullPageInfoFragment }\n          edges { node { __typename subredditInfo { __typename ...subredditFragment } ... on\n          ModQueueItemPost { postInfo { __typename ...postFragment } } ... on ModQueueItemComment {\n          commentInfo { __typename ...commentFragment } } ... on ModQueueItemChatComment {\n          commentInfo { __typename ...commentFragment } } } cursor } } }  fragment\n          fullPageInfoFragment on PageInfo { hasNextPage hasPreviousPage startCursor endCursor } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          crosspostContentFragment on Post { __typename ...postContentFragment ... on SubredditPost\n          { subreddit { __typename ...subredditFragment } } }  fragment\n          promotedCommunityPostFragment on AdPost { promotedCommunityPost { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment promotedUserPostFragment on AdPost { promotedUserPosts { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment postFragment on Post { __typename ...postContentFragment ... on SubredditPost {\n          subreddit @include(if: $includeSubredditInPosts) { __typename ...subredditFragment }\n          } crosspostRoot { type post { __typename ...crosspostContentFragment } } ... on AdPost {\n          __typename ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }  fragment\n          commentFragment on Comment { id createdAt editedAt parent { id } postInfo { __typename id\n          title ... on SubredditPost { subreddit { id name prefixedName } } ... on ProfilePost {\n          profile { redditorInfo { __typename ...redditorNameFragment } } } } isLocked\n          isInitiallyCollapsed initiallyCollapsedReason content { __typename markdown html richtext\n          typeHint ...richtextMediaFragment } authorInfo { __typename ...authorInfoFragment } score\n          voteState authorFlair { __typename ...authorFlairFragment } isSaved isStickied\n          isScoreHidden awardings @include(if: $includeAwards) { __typename\n          ...awardingTotalFragment } associatedAward { __typename ...awardFragment } treatmentTags\n          isArchived distinguishedAs permalink moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment ...proxyAuthorInfoFragment ... on\n          CommentModerationInfo { isAutoCollapsedFromCrowdControl } verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount isRemoved\n          ...lastAuthorModNoteFragment } }");
    public static final d f38473i1 = new d("49ebd4b32370", "ModQueueNewItemCount", "query ModQueueNewItemCount($lastseen: String) { modQueueCount(queueType: MOD, before:\n          $lastseen) { count } }");
    public static final d f38477j1 = new d("eac74c9e3404", "ModRecommendedSubreddits", "query ModRecommendedSubreddits($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { widgets { orderedSidebarWidgets {\n          __typename ... on CommunityListWidget { id shortName communities { id name isSubscribed\n          styles { icon primaryColor } } } } } } } }");
    public static final d f38481k1 = new d("d6fc692a866e", "MultiredditByPath", "query MultiredditByPath($path: String, $withSubreddits: Boolean = false ) {\n          multireddit(path: $path) { __typename ...customFeedMultiredditFragment } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          profileFragment on Profile { redditorInfo { __typename ... on Redditor { id name\n          prefixedName accountType } } id title description { markdown } subscribersCount isNsfw\n          isSubscribed isModeratable modPermissions { isAccessEnabled } whitelistStatus\n          isDefaultIcon name isQuarantined styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } legacyPrimaryColor } }  fragment customFeedMultiredditFragment on\n          Multireddit { name displayName descriptionContent { richtext } ownerInfo { __typename id\n          ... on Redditor { name } ... on UnavailableRedditor { name } } subredditCount visibility\n          path icon isFollowed isNsfw subreddits(first: 100) @include(if: $withSubreddits) {\n          edges { node { id name prefixedName subscribersCount styles { primaryColor\n          legacyPrimaryColor icon legacyIcon { url } } } } } profiles(first: 100) @include(if:\n          $withSubreddits) { edges { node { __typename ...profileFragment } } } }");
    public static final d f38485l1 = new d("764fc17a722c", "MultiredditPosts", "query MultiredditPosts($multiredditPath: String!, $sort: PostFeedSort,\n          $range: PostFeedRange, $after: String, $pageSize: Int, $adContext:\n          AdContextInput, $forceAds: ForceAdsInput, $includeSubredditInPosts: Boolean =\n          true , $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) { postFeed: multireddit(path: $multiredditPath) { posts(sort: $sort, time:\n          $range, after: $after, first: $pageSize, adContext: $adContext,\n          forceAds: $forceAds) { pageInfo { __typename ...pageInfoFragment } dist edges { node\n          { __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d f38489m1 = new d("634684da445a", "MyAuthoredMultireddits", "query MyAuthoredMultireddits($withSubreddits: Boolean = false , $after: String)\n          { identity { authoredMultireddits(after: $after) { edges { node { __typename\n          ...customFeedMultiredditFragment } } pageInfo { __typename ...pageInfoFragment } } } } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          profileFragment on Profile { redditorInfo { __typename ... on Redditor { id name\n          prefixedName accountType } } id title description { markdown } subscribersCount isNsfw\n          isSubscribed isModeratable modPermissions { isAccessEnabled } whitelistStatus\n          isDefaultIcon name isQuarantined styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } legacyPrimaryColor } }  fragment customFeedMultiredditFragment on\n          Multireddit { name displayName descriptionContent { richtext } ownerInfo { __typename id\n          ... on Redditor { name } ... on UnavailableRedditor { name } } subredditCount visibility\n          path icon isFollowed isNsfw subreddits(first: 100) @include(if: $withSubreddits) {\n          edges { node { id name prefixedName subscribersCount styles { primaryColor\n          legacyPrimaryColor icon legacyIcon { url } } } } } profiles(first: 100) @include(if:\n          $withSubreddits) { edges { node { __typename ...profileFragment } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }");
    public static final d f38493n1 = new d("ec7fd7913631", "MyMultireddits", "query MyMultireddits($withSubreddits: Boolean = false , $after: String) {\n          identity { allMultireddits(after: $after) { edges { node { __typename\n          ...customFeedMultiredditFragment } } pageInfo { __typename ...pageInfoFragment } } } } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          profileFragment on Profile { redditorInfo { __typename ... on Redditor { id name\n          prefixedName accountType } } id title description { markdown } subscribersCount isNsfw\n          isSubscribed isModeratable modPermissions { isAccessEnabled } whitelistStatus\n          isDefaultIcon name isQuarantined styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } legacyPrimaryColor } }  fragment customFeedMultiredditFragment on\n          Multireddit { name displayName descriptionContent { richtext } ownerInfo { __typename id\n          ... on Redditor { name } ... on UnavailableRedditor { name } } subredditCount visibility\n          path icon isFollowed isNsfw subreddits(first: 100) @include(if: $withSubreddits) {\n          edges { node { id name prefixedName subscribersCount styles { primaryColor\n          legacyPrimaryColor icon legacyIcon { url } } } } } profiles(first: 100) @include(if:\n          $withSubreddits) { edges { node { __typename ...profileFragment } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }");
    public static final d f38497o1 = new d("ebf205f51180", "MySubscriptionAndCoins", "query MySubscriptionAndCoins($subscritionType: String!) { identity { coins\n          econSubscriptions(subscriptionType: $subscritionType) { id startedAt expiresAt\n          ifCanceledExpiresAt renewInterval isCanceled source } } }");
    public static final d f38500p1 = new d("b9b34e06dc47", "NearbySubreddits", "query NearbySubreddits($first: Int!) { nearbySubreddits(first: $first) { edges\n          { node { prefixedName id publicDescriptionText subscribersCount styles { primaryColor\n          legacyPrimaryColor icon legacyIcon { url } } } } } }");
    public static final d f38504q1 = new d("45a5087514ad", "NewsFeed", "query NewsFeed($sort: PostFeedSort, $range: PostFeedRange, $after:\n          String, $pageSize: Int, $adContext: AdContextInput, $forceAds:\n          ForceAdsInput, $includeSubredditInPosts: Boolean = true , $includeAwards:\n          Boolean = true , $feedContext: FeedContextInput, $includeCommentPostUnits:\n          Boolean = false , $includePostStats: Boolean = false ) { news { elements(sort:\n          $sort, time: $range, after: $after, first: $pageSize, adContext:\n          $adContext, forceAds: $forceAds) { __typename dist\n          ...feedElementConnectionFragment edges { node { __typename ...subredditDetailFragment ...\n          on NewsFeedTopicsElement { topics { id displayName iconUrl subtopics { id displayName\n          subredditIds } } } } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage\n          endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions { width height }\n          }  fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          postRecommendationFragment on PostRecommendation { recommendationContext { __typename\n          content { richtext html } isContextHidden typeIdentifier ... on\n          InterestTopicRecommendationContext { interestTopicNode { id } } ... on\n          SimilarSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          } } } ... on TimeOnSubredditRecommendationContext { subreddit { __typename id ... on\n          Subreddit { name } } } ... on OnboardingPracticeFeedRecommendationContext {\n          interestTopicNode { id topic { name title } } } } postInfo { __typename ...postFragment }\n          }  fragment feedElementConnectionFragment on FeedElementConnection { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ...postFragment\n          ...postRecommendationFragment } } }  fragment subredditDetailFragment on Post { __typename\n          ... on SubredditPost { subreddit { __typename ...subredditFragment } } ... on ProfilePost\n          { profile { __typename ...profileFragment } } ... on AdPost { profile { __typename\n          ...profileFragment } } crosspostRoot { post { __typename ... on SubredditPost { subreddit\n          { __typename ...subredditFragment } } ... on ProfilePost { profile { __typename\n          ...profileFragment } } ... on AdPost { profile { __typename ...profileFragment } } } }\n          }");
    public static final d f38508r1 = new d("0d81d627c7ef", "OnboardingPracticeFeed", "query OnboardingPracticeFeed($interestTopicIds: [ID!], $first: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { onboardingPracticeFeed {\n          elements(onboardingFeedContext: { interestTopicIds: $interestTopicIds } , first:\n          $first) { edges { node { __typename ...postRecommendationFragment } } } } } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          postRecommendationFragment on PostRecommendation { recommendationContext { __typename\n          content { richtext html } isContextHidden typeIdentifier ... on\n          InterestTopicRecommendationContext { interestTopicNode { id } } ... on\n          SimilarSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          } } } ... on TimeOnSubredditRecommendationContext { subreddit { __typename id ... on\n          Subreddit { name } } } ... on OnboardingPracticeFeedRecommendationContext {\n          interestTopicNode { id topic { name title } } } } postInfo { __typename ...postFragment }\n          }");
    public static final d f38512s1 = new d("43da8db3763b", "PersonalizedYearInReview", "query PersonalizedYearInReview { personalizedYearInReview { cards { __typename title\n          subtitle contentType ...genericCardFragment ...introCardFragment ...singleStatCardFragment\n          ...postCardFragment ...commentCardFragment ...subredditCardFragment\n          ...subredditListSingleStatCardFragment ...subredditListCardFragment ...shareCardFragment\n          ...endCardFragment } } }  fragment genericCardFragment on\n          PersonalizedYearInReviewGenericCard { templateImageUrl }  fragment introCardFragment on\n          PersonalizedYearInReviewIntroCard { templateImageUrl }  fragment singleStatCardFragment on\n          PersonalizedYearInReviewSingleStatCard { value unit isPlusText templateImageUrl } \n          fragment postCardFragment on PersonalizedYearInReviewPostCard { postId postDeeplink\n          postScore postTitle postImageUrl subredditId subredditName }  fragment commentCardFragment\n          on PersonalizedYearInReviewCommentCard { postId postDeeplink postTitle postImageUrl\n          commentId commentText commentScore commentDeeplink subredditId }  fragment\n          subredditCardFragment on PersonalizedYearInReviewSubredditCard { subredditId subredditName\n          deeplink templateImageUrl }  fragment subredditListSingleStatCardFragment on\n          PersonalizedYearInReviewSingleStatSubredditListCard { subredditList { subredditId\n          subredditName deeplink } subredditCount subredditCountSuffix }  fragment\n          subredditListCardFragment on PersonalizedYearInReviewSubredditListCard { subredditList {\n          subredditId subredditName deeplink totalTimeOnSubreddit timeUnit } }  fragment\n          shareCardFragment on PersonalizedYearInReviewShareCard { isPremium level userName\n          userKarma userAvatar subredditListOptional { subredditId subredditName deeplink } } \n          fragment endCardFragment on PersonalizedYearInReviewEndCard { subredditList { subredditId\n          subredditName deeplink } isEmailVerified isDigestEnabled }");
    public static final d f38516t1 = new d("1ca275ae4cac", "PollVote", "mutation PollVote($input: UpdatePostPollVoteStateInput!) {\n          updatePostPollVoteState(input: $input) { ok poll { options { id text voteCount }\n          totalVoteCount votingEndsAt selectedOptionId } errors { message } fieldErrors { field\n          message } } }");
    public static final d f38520u1 = new d("b724ed18424e", "PopularFeedElements", "query PopularFeedElements($sort: PostFeedSort, $range: PostFeedRange,\n          $after: String, $pageSize: Int, $adContext: AdContextInput,\n          $region: RegionGeoCode, $forceAds: ForceAdsInput,\n          $includeSubredditInPosts: Boolean = true , $forceGeopopular: Boolean = true ,\n          $includeTopicRecommendations: Boolean = false , $includeAwards: Boolean = true\n          , $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false , $experienceInputs:\n          [UxTargetingExperience!]!, $advancedConfiguration:\n          UxTargetingAdvancedConfigurationInput!) { postFeed: popular { elements(sort: $sort,\n          time: $range, after: $after, first: $pageSize, adContext:\n          $adContext, region: $region, forceAds: $forceAds, forceGeopopular:\n          $forceGeopopular, uxTargetingContext: { experienceInputs: $experienceInputs\n          advancedConfiguration: $advancedConfiguration } ) { geoFilter pageInfo { __typename\n          ...pageInfoFragment } dist edges { node { __typename ...postFragment\n          ...feedAnswerableQuestionsFragment ...topicRecommendationsFeedElementFragment @include(if:\n          $includeTopicRecommendations) } } } } }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          answerableQuestionAnalyticsDataFragment on Subreddit { modPermissions { isAllAllowed\n          isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed isMailEditingAllowed\n          isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed isChatOperator\n          isChannelsEditingAllowed isCommunityChatEditingAllowed } id name publicDescriptionText\n          isNsfw type originalContentCategories isQuarantined whitelistStatus isSubscribed\n          isFavorite karma { fromComments fromPosts } }  fragment answerableQuestionsFragment on\n          Subreddit { __typename answerableQuestions { id type questionText answerOptions { id text\n          } } ...answerableQuestionAnalyticsDataFragment }  fragment feedAnswerableQuestionsFragment\n          on SubredditPost { subreddit { __typename ...answerableQuestionsFragment } }  fragment\n          interestTopicRecommendationsFragment on InterestTopicRecommendations {\n          recommendationTopics { edges { node { id topic { title name } } } } }  fragment\n          topicRecommendationsFeedElementFragment on InterestTopicRecommendationsFeedElement { id\n          topicRecommendations: recommendations { __typename ...interestTopicRecommendationsFragment\n          } }");
    public static final d f38524v1 = new d("bcfe45174560", "PostComments", "query PostComments($id: ID!, $sortType: CommentSort, $after: String,\n          $maxDepth: Int, $count: Int, $includeAwards: Boolean = true ) {\n          postInfoById(id: $id) { __typename ...pdsBasicPostInfoFragment commentForest(sort:\n          $sortType, after: $after, count: $count, maxDepth: $maxDepth) {\n          __typename ...commentForestTreesFragment } commentCount } }  fragment redditorNameFragment\n          on RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          pdsBasicPostInfoFragment on PostInfo { __typename id ... on SubredditPost { subreddit { id\n          name prefixedName } } ... on ProfilePost { profile { redditorInfo { __typename\n          ...redditorNameFragment } } } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment groupAwardFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }\n           fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename ...\n          on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment commentFragment on Comment { id createdAt editedAt parent { id }\n          postInfo { __typename id title ... on SubredditPost { subreddit { id name prefixedName } }\n          ... on ProfilePost { profile { redditorInfo { __typename ...redditorNameFragment } } } }\n          isLocked isInitiallyCollapsed initiallyCollapsedReason content { __typename markdown html\n          richtext typeHint ...richtextMediaFragment } authorInfo { __typename ...authorInfoFragment\n          } score voteState authorFlair { __typename ...authorFlairFragment } isSaved isStickied\n          isScoreHidden awardings @include(if: $includeAwards) { __typename\n          ...awardingTotalFragment } associatedAward { __typename ...awardFragment } treatmentTags\n          isArchived distinguishedAs permalink moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment ...proxyAuthorInfoFragment ... on\n          CommentModerationInfo { isAutoCollapsedFromCrowdControl } verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount isRemoved\n          ...lastAuthorModNoteFragment } }  fragment commentForestTreesFragment on CommentForest {\n          trees { depth more { count cursor isTooDeepForCount } parentId node { __typename\n          ...commentFragment } childCount } }");
    public static final d f38528w1 = new d("a73662ef1013", "PostSetPost", "query PostSetPost($id: ID!) { postInfoById(id: $id) { __typename\n          ...PostSetPostFragment } }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment PostSetAuthorInfo on RedditorInfo { __typename ... on Redditor\n          { id name prefixedName displayName icon { __typename ...mediaSourceFragment }\n          snoovatarIcon { __typename ...mediaSourceFragment } } }  fragment mediaDimensions on\n          Dimensions { width height }  fragment PostSetPostFragment on Post { __typename id title\n          createdAt domain permalink isScoreHidden discussionType isReactAllowed url poll {\n          isPrediction } audioRoom { roomId } content { html typeHint markdown richtext\n          richtextMedia { id userId mimetype width height status } } voteState authorInfo {\n          __typename ...PostSetAuthorInfo } ... on SubredditPost { id isOwnPost subreddit { id name\n          isQuarantined prefixedName styles { icon } } otherDiscussionsCount } ... on ProfilePost {\n          id isOwnPost otherDiscussionsCount profile { redditorInfo { __typename ... on Redditor {\n          id name prefixedName icon { __typename ...mediaSourceFragment } snoovatarIcon { __typename\n          ...mediaSourceFragment } } } } } isNsfw isSpoiler isContestMode isMediaOnly media {\n          typeHint still { content { __typename ...mediaSourceFragment } } obfuscated { content {\n          __typename ...mediaSourceFragment } } animated { variant { __typename\n          ...mediaSourceFragment } } video { url embedHtml dimensions { __typename\n          ...mediaDimensions } } } liveEvent { id } poll { isPrediction } upvoteRatio commentCount\n          awardings { award { staticIcon { __typename ...mediaSourceFragment } } total } }");
    public static final d f38532x1 = new d("b7dba9b8b4c4", "PostSetSharedTo", "query PostSetSharedTo($postSetId: ID!) { postSetsByIds(ids: [$postSetId]) {\n          posts { edges { node { __typename ...PostSetPostFragment } } } defaultPost { __typename\n          ...PostSetPostFragment } } identity { settings { postSetSettings { maxPostsPerPostSet } }\n          } }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment PostSetAuthorInfo on RedditorInfo { __typename ... on Redditor { id name\n          prefixedName displayName icon { __typename ...mediaSourceFragment } snoovatarIcon {\n          __typename ...mediaSourceFragment } } }  fragment mediaDimensions on Dimensions { width\n          height }  fragment PostSetPostFragment on Post { __typename id title createdAt domain\n          permalink isScoreHidden discussionType isReactAllowed url poll { isPrediction } audioRoom\n          { roomId } content { html typeHint markdown richtext richtextMedia { id userId mimetype\n          width height status } } voteState authorInfo { __typename ...PostSetAuthorInfo } ... on\n          SubredditPost { id isOwnPost subreddit { id name isQuarantined prefixedName styles { icon\n          } } otherDiscussionsCount } ... on ProfilePost { id isOwnPost otherDiscussionsCount\n          profile { redditorInfo { __typename ... on Redditor { id name prefixedName icon {\n          __typename ...mediaSourceFragment } snoovatarIcon { __typename ...mediaSourceFragment } }\n          } } } isNsfw isSpoiler isContestMode isMediaOnly media { typeHint still { content {\n          __typename ...mediaSourceFragment } } obfuscated { content { __typename\n          ...mediaSourceFragment } } animated { variant { __typename ...mediaSourceFragment } }\n          video { url embedHtml dimensions { __typename ...mediaDimensions } } } liveEvent { id }\n          poll { isPrediction } upvoteRatio commentCount awardings { award { staticIcon { __typename\n          ...mediaSourceFragment } } total } }");
    public static final d f38536y1 = new d("0a1ea2263831", "PostsByIds", "query PostsByIds($ids: [ID!]!, $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includeSubredditInPosts: Boolean = true , $includePostStats: Boolean = false\n          , $includeDeletedPosts: Boolean = false ) { postsInfoByIds(ids: $ids) {\n          __typename ...postContentFragment ...postFragment ...deletedPostFragment @include(if:\n          $includeDeletedPosts) } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          deletedPostFragment on DeletedSubredditPost { id createdAt title commentCount subreddit {\n          __typename ...subredditFragment } }");
    public static final d z1 = new d("613fdaf1f778", "Profile", "query Profile($name: String!) { redditorInfoByName(name: $name) { __typename\n          ...redditorProfileInfo } }  fragment socialLinkFragment on SocialLink { id type title\n          handle outboundUrl }  fragment redditorProfileInfo on Redditor { id name isPremiumMember\n          isVerified isProfileAvailable accountType profile { subscribersCount createdAt\n          allowedPostTypes socialLinks { __typename ...socialLinkFragment } } karma { total\n          fromAwardsGiven fromAwardsReceived fromPosts fromComments } snoovatarIcon { url }\n          isAcceptingFollowers }");
    public static final d A1 = new d("beaa102d7ea3", "ProfileTrophies", "query ProfileTrophies($profileName: String!) { redditorInfoByName(name:\n          $profileName) { __typename ... on Redditor { trophies { description icon70Url\n          grantedAt name trophyId awardId url } } } }");
    public static final d B1 = new d("2dd9daf9a95c", "ReOrderSocialLinks", "mutation ReOrderSocialLinks($input: ReorderSocialLinksInput!) {\n          reorderSocialLinks(input: $input) { ok errors { message } socialLinks { __typename\n          ...socialLinkFragment } } }  fragment socialLinkFragment on SocialLink { id type title\n          handle outboundUrl }");
    public static final d C1 = new d("c24c37862159", "ReallocatePowerups", "mutation ReallocatePowerups($input: PowerupsReallocationInput!) {\n          reallocatePowerups(input: $input) { ok errors { message } } }");
    public static final d D1 = new d("c1d6334273e7", "RecommendedLinkedPosts", "query RecommendedLinkedPosts($postId: ID!, $correlationId: ID!,\n          $includeSubredditInPosts: Boolean = true , $experimentVariant: String,\n          $after: String, $includeAwards: Boolean = true , $feedContext:\n          FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { postInfoById(id: $postId) { __typename\n          ... on Post { linked(correlationId: $correlationId, experimentVariant:\n          $experimentVariant) { posts(after: $after) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ...postFragment } } } } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment imageAssetFragment on ImageAsset\n          { __typename id status mimetype width height url small: preview(maxWidth: 108) {\n          __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d E1 = new d("6d21201609d8", "RecommendedMediaFeed", "query RecommendedMediaFeed($mediaFeedContext: RecommendedMediaFeedContextInput,\n          $after: String, $pageSize: Int, $forceAds: ForceAdsInput,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false , $sort: PostFeedSort, $time:\n          PostFeedRange) { recommendedMediaFeed { elements(mediaFeedContext:\n          $mediaFeedContext, after: $after, first: $pageSize, forceAds:\n          $forceAds, sort: $sort, time: $time) { __typename pageInfo { __typename\n          ...pageInfoFragment } dist edges { __typename node { __typename ...postFragment } } } } } \n          fragment pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d F1 = new d("4f447e4f8a86", "RecommendedSimilarPosts", "query RecommendedSimilarPosts($postSimilarityFeedContext:\n          RecommendedPostSimilarityFeedContextInput!, $includeSubredditInPosts: Boolean = true\n          , $first: Int, $after: String, $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { similarRecommendedPostsFeed {\n          elements(postSimilarityContext: $postSimilarityFeedContext, after: $after,\n          first: $first) { pageInfo { __typename ...pageInfoFragment } edges { node {\n          __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage\n          endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions { width height }\n          }  fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d G1 = new d("79eda7995313", "RecommendedVideoPosts", "query RecommendedVideoPosts($videoFeedContext: RecommendedVideoFeedContextInput,\n          $after: String, $pageSize: Int, $includeSubredditInPosts: Boolean = true\n          , $forceAds: ForceAdsInput, $includeAwards: Boolean = true , $adContext:\n          AdContextInput, $feedContext: FeedContextInput, $includeCommentPostUnits:\n          Boolean = false , $includePostStats: Boolean = false , $sort: PostFeedSort,\n          $time: PostFeedRange) { recommendedVideoFeed { posts(videoFeedContext:\n          $videoFeedContext, after: $after, first: $pageSize, forceAds:\n          $forceAds, adContext: $adContext, sort: $sort, time: $time) {\n          __typename pageInfo { __typename ...pageInfoFragment } dist edges { __typename node {\n          __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage\n          endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions { width height }\n          }  fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d H1 = new d("8d5deae7ff29", "RedditorPowerups", "query RedditorPowerups($username: String!) { redditorInfoByName(name:\n          $username) { __typename ... on Redditor { powerups { supportedSubreddits {\n          __typename ...publicPowerupAllocation } } } } }  fragment subredditPowerupInfoMin on\n          Subreddit { id name prefixedName styles { icon primaryColor } }  fragment\n          publicPowerupAllocation on PublicPowerupsAllocation { powerups subredditInfo { __typename\n          ...subredditPowerupInfoMin } }");
    public static final d I1 = new d("f78349110ca5", "RedditorsPowerups", "query RedditorsPowerups($userIds: [ID!]!) { redditorsInfoByIds(ids: $userIds) {\n          __typename ... on Redditor { id powerups { supportedSubreddits { subredditInfo { id }\n          powerups } } } } }");
    public static final d J1 = new d("84e27c5bc080", "RemoveAward", "mutation RemoveAward($input: RemoveAwardInput!) { removeAward(input: $input) {\n          ok errors { message } } }");
    public static final d K1 = new d("843103adbaa5", "ReportAward", "mutation ReportAward($input: ReportAwardInput!) { reportAward(input: $input) {\n          ok } }");
    public static final d L1 = new d("de1744f81d83", "ReportChatMessage", "mutation ReportChatMessage($input: ReportChatMessageInput!) {\n          reportChatMessage(input: $input) { ok } }");
    public static final d M1 = new d("98c3e0856444", "ResolvePrediction", "mutation ResolvePrediction($input: ResolvePredictionInput!) {\n          resolvePrediction(input: $input) { ok poll { __typename ...postPollFragment } errors\n          { message } } }  fragment postPollOptionFragment on PostPollOption { id text voteCount\n          totalStakeAmount redditorStakeAmount }  fragment postPollFragment on PostPoll { options {\n          __typename ...postPollOptionFragment } totalVoteCount votingEndsAt selectedOptionId\n          isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId voteUpdatesRemained\n          predictionStatus }");
    public static final d N1 = new d("dba058853470", "SavedComments", "query SavedComments($after: String) { identity { savedComments(after: $after) {\n          pageInfo { __typename ...pageInfoFragment } edges { node { __typename ... on Comment { id\n          createdAt score isSaved isLocked isArchived isScoreHidden isStickied gildingTotals { type\n          { id displayName } total } permalink voteState content { __typename markdown html richtext\n          ...richtextMediaFragment } authorInfo { __typename id ...redditorNameFragment }\n          authorFlair { richtext text template { id backgroundColor textColor } } awardings {\n          __typename ...awardingTotalFragment } moderationInfo { __typename\n          ...lastAuthorModNoteFragment } } postInfo { __typename title id ... on SubredditPost {\n          subreddit { id name prefixedName } } ... on ProfilePost { profile { redditorInfo {\n          __typename id ...redditorNameFragment } } } } } } } } }  fragment pageInfoFragment on\n          PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat icon_16:\n          icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          awardingTotalFragment on AwardingTotal { award { __typename ...awardFragment } total } \n          fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename ...\n          on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }");
    public static final d O1 = new d("b9a4d5fa83fa", "SavedPosts", "query SavedPosts($after: String, $pageSize: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { identity { posts: savedPosts(after:\n          $after, first: $pageSize) { pageInfo { __typename ...pageInfoFragment } edges\n          { node { __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d P1 = new d("53bcddc6b332", "ScheduledPostsForSubreddit", "query ScheduledPostsForSubreddit($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename id ... on Subreddit { scheduledPosts { __typename\n          ...standaloneScheduledPostsFragment ...recurringScheduledPostsFragment } } } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment scheduledPostFragment on ScheduledPost {\n          id title body postKind isSpoiler isNsfw isOriginalContent isSendReplies sticky\n          distinguishedAs flair { type text textColor richtext template { backgroundColor cssClass\n          id isEditable isModOnly text textColor type richtext } } subreddit { __typename id name\n          ... on Subreddit { path prefixedName } } clientTimezone frequency interval byMonthDays\n          byWeekDays publishAt owner { __typename id ... on Redditor { prefixedName name } }\n          contentType state url mediaAssets { __typename ...mediaAssetFragment } }  fragment\n          standaloneScheduledPostsFragment on ScheduledPosts { standalonePosts { edges { node {\n          __typename ...scheduledPostFragment } } } }  fragment recurringScheduledPostsFragment on\n          ScheduledPosts { recurringPosts { edges { node { __typename ...scheduledPostFragment } } }\n          }");
    public static final d Q1 = new d("6147979d8a7f", "SearchChatGifs", "query SearchChatGifs($query: String!, $first: Int, $after: String) {\n          searchChatGifs(query: $query, first: $first, after: $after) { version\n          provider pageInfo { hasNextPage endCursor } edges { node { id title downsized:\n          source(size: DOWNSIZED) { __typename ...mediaSourceFragment } fixed_height: source(size:\n          FIXED_HEIGHT) { __typename ...mediaSourceFragment } fixed_width: source(size: FIXED_WIDTH)\n          { __typename ...mediaSourceFragment } } } } }  fragment mediaSourceFragment on MediaSource\n          { url dimensions { width height } }");
    public static final d R1 = new d("d303003d704b", "SearchUserForBlock", "query SearchUserForBlock($username: String!) { redditorInfoByName(name:\n          $username) { __typename ... on Redditor { id icon { url } } } }");
    public static final d S1 = new d("a5ff58e82b67", "SetDefaultEmailPreferences", "mutation SetDefaultEmailPreferences { setDefaultEmailPreferences { ok errors { message } }\n          }");
    public static final d T1 = new d("8e9b0dce80ce", "SetSocialLinks", "mutation SetSocialLinks($input: SetSocialLinksInput!) { setSocialLinks(input:\n          $input) { ok errors { message } socialLinks { __typename ...socialLinkFragment } } }\n           fragment socialLinkFragment on SocialLink { id type title handle outboundUrl }");
    public static final d U1 = new d("c1eb777fc518", "SortedUsableAwardsForProfile", "query SortedUsableAwardsForProfile($name: String!, $nodeId: ID!,\n          $includeGroup: Boolean, $isSuperchatEnabled: Boolean) { profileByName(name:\n          $name) { __typename ... on Profile { sortedUsableAwards(nodeId: $nodeId,\n          includeGroup: $includeGroup, isSuperchatEnabled: $isSuperchatEnabled) {\n          __typename ...awardingTotalDetailsFragment } awardingTray { __typename\n          ...awardingTrayFragment } moderation { coins } } } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment groupAwardFragment on Award {\n          tiers { awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }  fragment awardingTotalDetailsFragment on AwardingTotal { award { __typename\n          ...awardFragment ...awardDetailsFragment } total }  fragment awardingTrayFragment on\n          AwardingTray { sortedUsableTags { tag content { markdown } } }");
    public static final d V1 = new d("5b7ad8022c67", "SortedUsableAwardsWithTags", "query SortedUsableAwardsWithTags($subredditId: ID!, $nodeId: ID!,\n          $includeGroup: Boolean, $isSuperchatEnabled: Boolean) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { sortedUsableAwards(nodeId:\n          $nodeId, includeGroup: $includeGroup, isSuperchatEnabled:\n          $isSuperchatEnabled) { __typename ...awardingTotalDetailsFragment } awardingTray {\n          __typename ...awardingTrayFragment } moderation { coins } } } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat icon_16:\n          icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }  fragment awardingTotalDetailsFragment on AwardingTotal { award { __typename\n          ...awardFragment ...awardDetailsFragment } total }  fragment awardingTrayFragment on\n          AwardingTray { sortedUsableTags { tag content { markdown } } }");
    public static final d W1 = new d("5b5b8021063c", "StickyPostsForSubreddit", "query StickyPostsForSubreddit($subredditName: String!,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { stickyPosts { __typename\n          ...postFragment } } } }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d X1 = new d("0155f138621c", "SubmitMediaUpload", "mutation SubmitMediaUpload($input: SubmitMediaInput!) { submitMedia(input:\n          $input) { errors { message } ok } }");
    public static final d Y1 = new d("73d77d811ed3", "SubmitScheduledPostNow", "mutation SubmitScheduledPostNow($input: SubmitScheduledPostInput!,\n          $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) { submitScheduledPost(input: $input) { ok errors { message } post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } } } }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } }\n           fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }");
    public static final d Z1 = new d("65d9b9ed868a", "SubredditChannelsDisableChannels", "mutation SubredditChannelsDisableChannels($input: DisableChannelInSubredditInput!) {\n          disableChannelInSubreddit(input: $input) { ok errors { code message } } }");
    public static final d f38443a2 = new d("cbe6937385c1", "SubredditChannelsEnableChannels", "mutation SubredditChannelsEnableChannels($input: EnableChannelsInSubredditInput!) {\n          enableChannelsInSubreddit(input: $input) { ok errors { code message } } }");
    public static final d b2 = new d("3496a5858eb9", "SubredditFeedElements", "query SubredditFeedElements($subredditName: String!, $sort: PostFeedSort,\n          $range: PostFeedRange, $after: String, $pageSize: Int, $adContext:\n          AdContextInput, $forceAds: ForceAdsInput, $feedFilters: FeedFiltersInput,\n          $optedIn: Boolean = false , $includeSubredditInPosts: Boolean!,\n          $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) @loggedOutQuarantineOptedin(isOptedIn: $optedIn) { postFeed:\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit { __typename\n          ...subredditFragment @skip(if: $includeSubredditInPosts) elements(sort: $sort,\n          time: $range, after: $after, first: $pageSize, adContext:\n          $adContext, forceAds: $forceAds, feedFilters: $feedFilters) { pageInfo {\n          __typename ...pageInfoFragment } dist edges { node { __typename ...postFragment } } } } }\n          }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor } \n          fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height url\n          small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          crosspostContentFragment on Post { __typename ...postContentFragment ... on SubredditPost\n          { subreddit { __typename ...subredditFragment } } }  fragment\n          promotedCommunityPostFragment on AdPost { promotedCommunityPost { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment promotedUserPostFragment on AdPost { promotedUserPosts { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment postFragment on Post { __typename ...postContentFragment ... on SubredditPost {\n          subreddit @include(if: $includeSubredditInPosts) { __typename ...subredditFragment }\n          } crosspostRoot { type post { __typename ...crosspostContentFragment } } ... on AdPost {\n          __typename ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d f38450c2 = new d("71fff12d726b", "SubredditPostRequirements", "query SubredditPostRequirements($name: String!) { subredditInfoByName(name:\n          $name) { __typename ...subredditDetailsFragment ...unavailableSubredditFragment\n          ...subredditPowerupTierAndBenefitsFragment ... on Subreddit { postRequirements {\n          __typename ...postRequirementsFragment } } } }  fragment subredditDetailsFragment on\n          Subreddit { id name prefixedName styles { legacyIcon { url } legacyPrimaryColor\n          legacyBannerBackgroundImage primaryColor icon bannerBackgroundImage mobileBannerImage }\n          title description { markdown richtext } publicDescriptionText subscribersCount activeCount\n          createdAt type path isNsfw wikiEditMode whitelistStatus isPostingRestricted isQuarantined\n          quarantineMessage { markdown richtext } interstitialWarningMessage { markdown richtext }\n          allowedPostTypes isChatPostCreationAllowed isChatPostFeatureEnabled isSpoilerAvailable\n          isPredictionAllowed isUserBanned isContributor modPermissions { isAllAllowed\n          isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed isMailEditingAllowed\n          isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed isChatOperator\n          isChannelsEditingAllowed isCommunityChatEditingAllowed } isSubscribed isFavorite\n          notificationLevel authorFlairSettings { isEnabled isSelfAssignable isOwnFlairEnabled }\n          authorFlair { template { id backgroundColor textColor text richtext } } postFlairSettings\n          { isEnabled } originalContentCategories predictionLeaderboardEntryType\n          isPredictionsTournamentAllowed isTitleSafe isMediaInCommentsSettingShown\n          allowedMediaInComments isMuted isChannelsEnabled }  fragment unavailableSubredditFragment\n          on UnavailableSubreddit { id name createdAt publicDescriptionText isQuarantined\n          forbiddenReason banTitle banMessage banMessageContent { markdown richtext html }\n          isEmailRequiredForQuarantineOptin quarantineMessage { markdown richtext html typeHint }\n          interstitialWarningMessage { markdown richtext } isContributorRequestsDisabled }  fragment\n          subredditPowerupTierAndBenefitsFragment on Subreddit { id name powerups { tier count\n          benefits supportersCount tiersInfo { tier powerupsCost benefits } } powerupsSettings {\n          benefitStatuses { benefit isEnabled } } }  fragment postRequirementsFragment on\n          PostRequirements { bodyBlacklistedStrings bodyRegexes bodyRequiredStrings\n          bodyRestrictionPolicy domainBlacklist domainWhitelist galleryCaptionsRequirement\n          galleryMaxItems galleryMinItems galleryUrlsRequirement guidelinesText isFlairRequired\n          linkRepostAge linkRestrictionPolicy titleBlacklistedStrings titleRegexes\n          titleRequiredStrings titleTextMaxLength titleTextMinLength }");
    public static final d f38454d2 = new d("152169d91bcf", "SubredditPowerupTierAndBenefits", "query SubredditPowerupTierAndBenefits($subredditName: String!) {\n          subredditInfoByName(name: $subredditName) { __typename\n          ...subredditPowerupTierAndBenefitsFragment } }  fragment\n          subredditPowerupTierAndBenefitsFragment on Subreddit { id name powerups { tier count\n          benefits supportersCount tiersInfo { tier powerupsCost benefits } } powerupsSettings {\n          benefitStatuses { benefit isEnabled } } }");
    public static final d f38458e2 = new d("5fbcf0adc4bd", "SubredditTopPredictors", "query SubredditTopPredictors($subredditName: String!, $period: RankPeriod!,\n          $top: Int, $tournamentId: ID) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { prefixedName\n          predictionWinners(period: $period, top: $top, tournamentId:\n          $tournamentId) { topPredictorsRank { __typename ...redditorRankFragment }\n          currentRank { __typename ...redditorRankFragment } } } } }  fragment mediaSourceFragment\n          on MediaSource { url dimensions { width height } }  fragment redditorResizedIconsFragment\n          on Redditor { icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment } icon_32:\n          icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth: 48) {\n          __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } icon_72: icon(maxWidth: 72) { __typename ...mediaSourceFragment }\n          icon_96: icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth:\n          128) { __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment\n          } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment } icon_384:\n          icon(maxWidth: 384) { __typename ...mediaSourceFragment } }  fragment redditorFragment on\n          Redditor { __typename id name ...redditorResizedIconsFragment snoovatarIcon { url }\n          profile { isNsfw } }  fragment redditorRankFragment on RedditorRank { __typename ... on\n          RedditorRank { redditor { __typename ...redditorFragment } score rank } }");
    public static final d f38462f2 = new d("62ab28438aef", "SubredditTopSupporters", "query SubredditTopSupporters($subredditName: String!, $type: String!) {\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit {\n          supporters(supporterType: $type) { topSupporters { score lastSupportedAt\n          supporterInfo { __typename ... on Redditor { id name icon { url } snoovatarIcon { url }\n          profile { isNsfw } } } } } } } }");
    public static final d f38466g2 = new d("b4dec52c105c", "SubredditWikiIndex", "query SubredditWikiIndex($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { id wiki { index { status pageTree {\n          __typename ...subredditWikiPageNodeFragment } } } } } }  fragment\n          subredditWikiPageNodeFragment on SubredditWikiPageNode { name path depth isPagePresent\n          parent }");
    public static final d f38470h2 = new d("854c86cafc54", "SubredditWikiPage", "query SubredditWikiPage($subredditName: String!, $pageName: String) {\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit { id wiki {\n          page(name: $pageName) { __typename ...subredditWikiPageFragment } } } } }  fragment\n          redditorNameFragment on RedditorInfo { __typename ... on Redditor { id name prefixedName }\n          ... on UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          subredditWikiPageFragment on SubredditWikiPage { name status content { richtext } revision\n          { authorInfo { __typename ...redditorNameFragment } revisedAt } }");
    public static final d f38474i2 = new d("418a93d7697f", "SubredditsPowerupBenefits", "query SubredditsPowerupBenefits($subredditNames: [String!]!) {\n          subredditsInfoByNames(names: $subredditNames) { __typename id name ... on Subreddit\n          { powerups { benefits } } } }");
    public static final d f38478j2 = new d("4d823485ac9b", "SuggestSubredditGeoPlace", "mutation SuggestSubredditGeoPlace($input: SuggestedSubredditGeoPlaceInput!) {\n          suggestSubredditGeoPlace(input: $input) { ok errors { message } } }");
    public static final d f38482k2 = new d("f79226720242", "SuggestedUsernames", "query SuggestedUsernames($count: Int!) { generatedUsernames(count: $count) }");
    public static final d f38486l2 = new d("aac21de08738", "TopicBySlug", "query TopicBySlug($topicSlug: String!, $includePosts: Boolean!,\n          $includeSubreddits: Boolean!, $firstPosts: Int, $afterPosts: String,\n          $firstSubreddits: Int, $afterSubreddits: String,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { topicBySlug(slug: $topicSlug) { id name\n          posts(first: $firstPosts, after: $afterPosts) @include(if:\n          $includePosts) { dist pageInfo { __typename ...pageInfoFragment } edges { node {\n          __typename ...postFragment } } } subreddits(first: $firstSubreddits, after:\n          $afterSubreddits) @include(if: $includeSubreddits) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ...subredditFragment publicDescriptionText\n          } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d f38490m2 = new d("f89616da2d38", "UpdateAccountGender", "mutation UpdateAccountGender($input: UpdateAccountGender!) {\n          updateAccountGender(input: $input) { ok errors { message } } }");
    public static final d f38494n2 = new d("8570f9437bfa", "UpdateAchievementFlairPreference", "mutation UpdateAchievementFlairPreference($subredditId: ID!, $displayTypes:\n          [String!]!, $isHidden: Boolean!) { updateAchievementFlairPreference(input: {\n          subredditId: $subredditId displayTypes: $displayTypes isHidden:\n          $isHidden } ) { ok errors { message } } }");
    public static final d f38498o2 = new d("065553170cff", "UpdateChatMessageReaction", "mutation UpdateChatMessageReaction($channelSendbirdId: ID!, $messageSendbirdId:\n          ID!, $reactionIconKey: ID!, $type: MessageReactionUpdateType!) {\n          updateChatMessageReaction(input: { channelSendbirdId: $channelSendbirdId\n          messageSendbirdId: $messageSendbirdId reactionIconKey: $reactionIconKey type:\n          $type } ) { ok errors { message } } }");
    public static final d f38501p2 = new d("170e2f7d2276", "UpdateComment", "mutation UpdateComment($input: UpdateCommentInput!) { updateComment(input:\n          $input) { content { markdown html richtext } ok errors { message } fieldErrors {\n          message } } }");
    public static final d f38505q2 = new d("0e01aa628016", "UpdateCommentDistinguishState", "mutation UpdateCommentDistinguishState($input: UpdateCommentDistinguishStateInput!) {\n          updateCommentDistinguishState(input: $input) { ok errors { message } } }");
    public static final d f38509r2 = new d("12ba7facfc65", "UpdateCommentFollowState", "mutation UpdateCommentFollowState($input: UpdateCommentFollowStateInput!) {\n          updateCommentFollowState(input: $input) { ok errors { message } } }");
    public static final d f38513s2 = new d("71d91a68d862", "UpdateCommentSaveState", "mutation UpdateCommentSaveState($input: UpdateCommentSaveStateInput!) {\n          updateCommentSaveState(input: $input) { ok errors { message } } }");
    public static final d f38517t2 = new d("f8389dda844d", "UpdateCommentVoteState", "mutation UpdateCommentVoteState($input: UpdateCommentVoteStateInput!) {\n          updateCommentVoteState(input: $input) { ok errors { message } } }");
    public static final d f38521u2 = new d("720ca7e6d25b", "UpdateCommunityDiscoveryPreference", "mutation UpdateCommunityDiscoveryPreference($input:\n          UpdateRedditorCommunityDiscoveryPreferenceInput!) {\n          updateRedditorCommunityDiscoveryPreference(input: $input) { ok } }");
    public static final d f38525v2 = new d("3785f4c24d61", "UpdateCrowdControlFilter", "mutation UpdateCrowdControlFilter($postId: ID!, $isEnabled: Boolean!) {\n          updatePostCrowdControlFilter(input: { postId: $postId isEnabled: $isEnabled }\n          ) { ok errors { message } } }");
    public static final d f38529w2 = new d("f10c9b175648", "UpdateInboxActivitySeenState", "mutation UpdateInboxActivitySeenState($input: UpdateInboxActivitySeenStateInput!) {\n          updateInboxActivitySeenState(input: $input) { ok badgeIndicators { __typename\n          ...badgeIndicatorsFragment } } }  fragment badgeIndicatorsFragment on BadgeIndicators {\n          directMessages { count style } chatTab { count style } messageTab { count style }\n          activityTab { count style } inboxTab { count style } appBadge { count style }\n          chatHasNewMessages { style isShowing } }");
    public static final d f38533x2 = new d("83332bed8697", "UpdateModPnSettingStatus", "mutation UpdateModPnSettingStatus($input: UpdateModPnSettingStatusInput!) {\n          updateModPnSettingStatus(input: $input) { ok errors { message } } }");
    public static final d f38537y2 = new d("a5bcec9a699e", "UpdateModPnSettingThreshold", "mutation UpdateModPnSettingThreshold($input: UpdateModPnSettingThresholdInput!) {\n          updateModPnSettingThreshold(input: $input) { ok errors { message } } }");
    public static final d z2 = new d("dd2b31a17893", "UpdatePost", "mutation UpdatePost($input: UpdatePostInput!) { updatePost(input: $input) {\n          content { __typename markdown html richtext ...richtextMediaFragment } ok errors { message\n          } } }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height url\n          small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }");
    public static final d A2 = new d("fefe7490745b", "UpdatePostCrowdControlLevel", "mutation UpdatePostCrowdControlLevel($input: UpdatePostCrowdControlLevelInput!) {\n          updatePostCrowdControlLevel(input: $input) { ok errors { message } } }");
    public static final d B2 = new d("29b8bad68174", "UpdatePostDistinguishState", "mutation UpdatePostDistinguishState($input: UpdatePostDistinguishStateInput!) {\n          updatePostDistinguishState(input: $input) { ok errors { message } } }");
    public static final d C2 = new d("c61d234b0d5a", "UpdatePostFollowState", "mutation UpdatePostFollowState($input: UpdatePostFollowStateInput!) {\n          updatePostFollowState(input: $input) { ok errors { message } } }");
    public static final d D2 = new d("7335ed17a7b9", "UpdatePostHideState", "mutation UpdatePostHideState($input: UpdatePostHideStateInput!) {\n          updatePostHideState(input: $input) { ok } }");
    public static final d E2 = new d("b886714b0319", "UpdatePostNsfwState", "mutation UpdatePostNsfwState($input: UpdatePostNSFWStateInput!) {\n          updatePostNsfwState(input: $input) { ok errors { message } } }");
    public static final d F2 = new d("041bcf30ba0d", "UpdatePostSaveState", "mutation UpdatePostSaveState($input: UpdatePostSaveStateInput!) {\n          updatePostSaveState(input: $input) { ok errors { message } } }");
    public static final d G2 = new d("8796363d9781", "UpdatePostSetPostVoteState", "mutation UpdatePostSetPostVoteState($input: UpdatePostVoteStateInput!) {\n          updatePostVoteState(input: $input) { ok voteState errors { message code } } }");
    public static final d H2 = new d("8b4e5777bf42", "UpdatePostVoteState", "mutation UpdatePostVoteState($input: UpdatePostVoteStateInput!) {\n          updatePostVoteState(input: $input) { ok errors { message } } }");
    public static final d I2 = new d("02941662fd09", "UpdatePowerupsSettings", "mutation UpdatePowerupsSettings($input: UpdatePowerupsSettingsInput!) {\n          updatePowerupsSettings(input: $input) { ok powerupsSettings { benefitStatuses {\n          benefit isEnabled } } errors { message } } }");
    public static final d J2 = new d("eaf793530938", "UpdatePredictionTournament", "mutation UpdatePredictionTournament($input: UpdatePredictionTournamentInput!) {\n          updatePredictionTournament(input: $input) { ok errors { message } tournament {\n          __typename ...predictionTournamentFragment } } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }");
    public static final d K2 = new d("7679b39b8a60", "UpdateRecommendationPreferences", "mutation UpdateRecommendationPreferences($input:\n          UpdateRecommendationPreferencesInput!) { updateRecommendationPreferences(input:\n          $input) { ok errors { message } } }");
    public static final d L2 = new d("3bdaa10d7cb6", "UpdateRedditorBlockState", "mutation UpdateRedditorBlockState($redditorId: ID!, $blockState: BlockState!) {\n          updateRedditorBlockState(input: { redditorId: $redditorId blockState:\n          $blockState } ) { ok } }");
    public static final d M2 = new d("b020e3618e91", "UpdateRedditorFriendState", "mutation UpdateRedditorFriendState($input: UpdateRedditorFriendStateInput!) {\n          updateRedditorFriendState(input: $input) { ok } }");
    public static final d N2 = new d("d22dc8c92074", "UpdateScheduledPost", "mutation UpdateScheduledPost($input: UpdateScheduledPostInput!) {\n          updateScheduledPost(input: $input) { ok errors { message } scheduledPost {\n          __typename ...scheduledPostFragment } } }  fragment mediaSourceFragment on MediaSource {\n          url dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename\n          id status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment scheduledPostFragment on ScheduledPost {\n          id title body postKind isSpoiler isNsfw isOriginalContent isSendReplies sticky\n          distinguishedAs flair { type text textColor richtext template { backgroundColor cssClass\n          id isEditable isModOnly text textColor type richtext } } subreddit { __typename id name\n          ... on Subreddit { path prefixedName } } clientTimezone frequency interval byMonthDays\n          byWeekDays publishAt owner { __typename id ... on Redditor { prefixedName name } }\n          contentType state url mediaAssets { __typename ...mediaAssetFragment } }");
    public static final d O2 = new d("98f39bb6e223", "UpdateSocialLinks", "mutation UpdateSocialLinks($input: UpdateSocialLinksInput!) {\n          updateSocialLinks(input: $input) { socialLinks { __typename ...socialLinkFragment }\n          ok errors { message } } }  fragment socialLinkFragment on SocialLink { id type title\n          handle outboundUrl }");
    public static final d P2 = new d("7ca5effa3697", "UpdateSubredditCountrySettings", "mutation UpdateSubredditCountrySettings($input:\n          UpdateSubredditCountrySiteSettingsInput!) { updateSubredditCountrySiteSettings(input:\n          $input) { ok errors { message } subreddit { __typename ... on Subreddit { __typename\n          ...subredditCountryFragment } } } }  fragment subredditCountryFragment on Subreddit {\n          countrySiteSettings { countryCode languageCode isCountrySiteEditable modMigrationAt } }");
    public static final d Q2 = new d("771e5213ed51", "UpdateTopicPreferences", "mutation UpdateTopicPreferences($input: TopicPreferencesInput!) {\n          updateTopicPreferences(input: $input) { ok errors { message } } }");
    public static final d R2 = new d("24eb52ccceac", "UpdateVideoContentPermissionSettings", "mutation UpdateVideoContentPermissionSettings($input:\n          UpdateVideoContentPermissionSettingsInput!) { updateVideoContentPermissionSettings(input:\n          $input) { ok errors { message } } }");
    public static final d S2 = new d("ca2b28922357", "UpvotedPosts", "query UpvotedPosts($after: String, $pageSize: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { identity { upvotedPosts(after: $after,\n          first: $pageSize) { pageInfo { __typename ...pageInfoFragment } edges { node {\n          __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage\n          endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions { width height }\n          }  fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d T2 = new d("f7590a8b2a75", "UserAvatarInfo", "query UserAvatarInfo { avatarBuilderCatalog { userCapabilities avatar { __typename\n          ...avatarFragment } } }  fragment avatarFragment on UserAvatar { id accountId accessoryIds\n          backgroundInventoryItem { id } fullImage { url dimensions { width height } } headshotImage\n          { url dimensions { width height } } lastRenderAt lastUpdateAt styles { className fill }\n          tags }");
    public static final d U2 = new d("e301fd50ddf2", "UserCoinsInSubredditProducts", "query UserCoinsInSubredditProducts($subreddit: ID!) { subredditInfoById(id:\n          $subreddit) { __typename ... on Subreddit { productOffers(productTypes:\n          [\"user-coins-in-subreddit\"], includeGlobal: false) { offers { id version pricePackages {\n          id price currency } } } } } }");
    public static final d V2 = new d("f26daed5146e", "UserSubmittedPostSets", "query UserSubmittedPostSets($username: String!, $sort: PostFeedSort,\n          $range: PostFeedRange, $after: String, $pageSize: Int, $filter:\n          ProfileElementsQueryType!, $includeSubredditInPosts: Boolean = true ,\n          $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) { postFeed: redditorInfoByName(name: $username) { __typename ... on Redditor {\n          elements(filter: $filter, sort: $sort, time: $range, after:\n          $after, first: $pageSize) { pageInfo { __typename ...pageInfoFragment } dist\n          edges { node { __typename ...postFragment ...postSetFragment } } } profile { __typename\n          ...profilePinnedPostsFragment } } } identity { settings { postSetSettings {\n          maxPostsPerPostSet } } } }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor\n          }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height url\n          small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          subredditDetailFragment on Post { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ... on ProfilePost { profile { __typename ...profileFragment } }\n          ... on AdPost { profile { __typename ...profileFragment } } crosspostRoot { post {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } } ... on\n          ProfilePost { profile { __typename ...profileFragment } } ... on AdPost { profile {\n          __typename ...profileFragment } } } } }  fragment postConnectionFragment on PostConnection\n          { pageInfo { __typename ...pageInfoFragment } edges { node { __typename ...postFragment }\n          } }  fragment postSetFragment on PostSet { id defaultPost { __typename ...postFragment\n          ...subredditDetailFragment } posts { __typename ...postConnectionFragment edges { node {\n          __typename ...subredditDetailFragment } } } }  fragment profilePinnedPostsFragment on\n          Profile { stickyPosts { __typename ... on PostInfo { id } } }");
    public static final d W2 = new d("05c92a01a47b", "UserSubmittedPosts", "query UserSubmittedPosts($username: String!, $sort: ProfileFeedSort,\n          $range: PostFeedRange, $after: String, $pageSize: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { postFeed: redditorInfoByName(name:\n          $username) { __typename ... on Redditor { posts(sort: $sort, time:\n          $range, after: $after, first: $pageSize) { pageInfo { __typename\n          ...pageInfoFragment } dist edges { node { __typename ...postFragment } } } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment imageAssetFragment on ImageAsset\n          { __typename id status mimetype width height url small: preview(maxWidth: 108) {\n          __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }");
    public static final d X2 = new d("a56c64034ea6", "UsernameAndExperiments", "query UsernameAndExperiments($inputs: [ExperimentTargetingInput!]) { identity {\n          redditor { name } } experimentVariants(inputs: $inputs) { name experimentName\n          version } }");
    public static final d Y2 = new d("0d5b66ff5e5e", "VotePrediction", "mutation VotePrediction($input: VotePredictionInput!) { votePrediction(input:\n          $input) { ok poll { __typename ...postPollFragment } errors { message } } } \n          fragment postPollOptionFragment on PostPollOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment postPollFragment on PostPoll { options { __typename\n          ...postPollOptionFragment } totalVoteCount votingEndsAt selectedOptionId isPrediction\n          totalStakeAmount resolvedOptionId wonAmount tournamentId voteUpdatesRemained\n          predictionStatus }");
}
